
CarSimulatorFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008438  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008628  08008628  000206b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008630  08008630  000206b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006b8  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d24  200006b8  08008d00  000206b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013dc  08008d00  000213dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae01  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c01  00000000  00000000  0003b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  0003f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff0  00000000  00000000  00040288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002749a  00000000  00000000  00041278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001392e  00000000  00000000  00068712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdf2f  00000000  00000000  0007c040  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a70  00000000  00000000  00149fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006b8 	.word	0x200006b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085a8 	.word	0x080085a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006bc 	.word	0x200006bc
 80001c4:	080085a8 	.word	0x080085a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <_ZN7EncoderC1Ev>:

extern TIM_HandleTypeDef htim2;
static uint16_t newCount;
static uint16_t prevCount;

Encoder::Encoder(){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	encoderValue = 0;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
}
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_ZN7EncoderD1Ev>:

Encoder::~Encoder(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
}
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_ZN7Encoder12Encoder_InitEv>:

void Encoder::Encoder_Init(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000cf0:	213c      	movs	r1, #60	; 0x3c
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <_ZN7Encoder12Encoder_InitEv+0x18>)
 8000cf4:	f003 f95e 	bl	8003fb4 <HAL_TIM_Encoder_Start>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000a88 	.word	0x20000a88

08000d04 <_ZN7Encoder12Encoder_ReadEv>:

uint16_t  Encoder::Encoder_Read() {
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint16_t val = __HAL_TIM_GET_COUNTER(&htim2);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <_ZN7Encoder12Encoder_ReadEv+0x24>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	81fb      	strh	r3, [r7, #14]
  return val >> 1;
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	105b      	asrs	r3, r3, #1
 8000d18:	b29b      	uxth	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000a88 	.word	0x20000a88

08000d2c <_ZN7Encoder18Encoder_Get_StatusEv>:

Encoder_Status Encoder::Encoder_Get_Status() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  newCount = Encoder_Read();
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffe5 	bl	8000d04 <_ZN7Encoder12Encoder_ReadEv>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_ZN7Encoder18Encoder_Get_StatusEv+0x54>)
 8000d40:	801a      	strh	r2, [r3, #0]
  if (newCount != prevCount) {
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <_ZN7Encoder18Encoder_Get_StatusEv+0x54>)
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <_ZN7Encoder18Encoder_Get_StatusEv+0x58>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d012      	beq.n	8000d74 <_ZN7Encoder18Encoder_Get_StatusEv+0x48>
    if (newCount > prevCount) {
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <_ZN7Encoder18Encoder_Get_StatusEv+0x54>)
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <_ZN7Encoder18Encoder_Get_StatusEv+0x58>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d905      	bls.n	8000d66 <_ZN7Encoder18Encoder_Get_StatusEv+0x3a>
      prevCount = newCount;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <_ZN7Encoder18Encoder_Get_StatusEv+0x54>)
 8000d5c:	881a      	ldrh	r2, [r3, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <_ZN7Encoder18Encoder_Get_StatusEv+0x58>)
 8000d60:	801a      	strh	r2, [r3, #0]
      return Incremented;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e007      	b.n	8000d76 <_ZN7Encoder18Encoder_Get_StatusEv+0x4a>
    } else {
      prevCount = newCount;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <_ZN7Encoder18Encoder_Get_StatusEv+0x54>)
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <_ZN7Encoder18Encoder_Get_StatusEv+0x58>)
 8000d6c:	801a      	strh	r2, [r3, #0]
      return Decremented;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e000      	b.n	8000d76 <_ZN7Encoder18Encoder_Get_StatusEv+0x4a>
    }
  }
  return Neutral;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200006d4 	.word	0x200006d4
 8000d84:	200006d6 	.word	0x200006d6

08000d88 <_ZN7Encoder6updateEv>:

void Encoder::update(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	switch(Encoder_Get_Status()) {
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffcb 	bl	8000d2c <_ZN7Encoder18Encoder_Get_StatusEv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d019      	beq.n	8000dd0 <_ZN7Encoder6updateEv+0x48>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d003      	beq.n	8000da8 <_ZN7Encoder6updateEv+0x20>
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d00a      	beq.n	8000dbc <_ZN7Encoder6updateEv+0x34>
	      break;
	    case Neutral:
	      // don't do anything
	      break;
	  }
}
 8000da6:	e014      	b.n	8000dd2 <_ZN7Encoder6updateEv+0x4a>
	    	encoderValue++;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	801a      	strh	r2, [r3, #0]
	      break;
 8000dba:	e00a      	b.n	8000dd2 <_ZN7Encoder6updateEv+0x4a>
	    	encoderValue--;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	801a      	strh	r2, [r3, #0]
	      break;
 8000dce:	e000      	b.n	8000dd2 <_ZN7Encoder6updateEv+0x4a>
	      break;
 8000dd0:	bf00      	nop
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <_ZN7Encoder14Encoder_ConfigEv>:
  * @brief TIM2 Initialization Function (Encoder Mode)
  * @param None
  * @retval None
  */
void Encoder::Encoder_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2224      	movs	r2, #36	; 0x24
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f007 fb18 	bl	8008422 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;     // Capture performed each time an edge is detected on the capture input
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sConfig.IC1Filter = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;     // Capture performed each time an edge is detected on the capture input
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Filter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34

  HAL_TIM_Encoder_Init(&htim2, &sConfig);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e50:	f003 f81e 	bl	8003e90 <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]

  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <_ZN7Encoder14Encoder_ConfigEv+0x94>)
 8000e64:	f003 fea6 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000a88 	.word	0x20000a88

08000e74 <_ZN16FfbReportHandlerC1Ev>:
//  }
//}

#include "ffb_report_handler.h"

FfbReportHandler::FfbReportHandler() {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <_ZN16FfbReportHandlerC1Ev+0x50>)
 8000e98:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	8019      	strh	r1, [r3, #0]
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	0c12      	lsrs	r2, r2, #16
 8000ea6:	701a      	strb	r2, [r3, #0]
  nextEID = 1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
  devicePaused = 0;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	080085c0 	.word	0x080085c0

08000ec8 <_ZN16FfbReportHandlerD1Ev>:

FfbReportHandler::~FfbReportHandler() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  FreeAllEffects();
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f805 	bl	8000ee0 <_ZN16FfbReportHandler14FreeAllEffectsEv>
}
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_ZN16FfbReportHandler14FreeAllEffectsEv>:

void FfbReportHandler::FreeAllEffects(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  nextEID = 1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
  memset((void*)&gEffectStates, 0, sizeof(gEffectStates));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fa92 	bl	8008422 <memset>
  pidBlockLoad.ramPoolAvailable = MEMORY_SIZE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000f04:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_Z41__static_initialization_and_destruction_0ii>:

    memset((void*)effect, 0, sizeof(TEffectState));
    effect->state = MEFFECTSTATE_ALLOCATED;
    pidBlockLoad.ramPoolAvailable -= SIZE_EFFECT;
  }
}
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d107      	bne.n	8000f30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d102      	bne.n	8000f30 <_Z41__static_initialization_and_destruction_0ii+0x20>
    void FfbOnUsbData(uint8_t* data, uint16_t len);
    uint8_t* FfbOnPIDPool();
    uint8_t* FfbOnPIDBlockLoad();
    uint8_t* FfbOnPIDStatus();
};
FfbReportHandler ffbReportHandler;
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000f2c:	f7ff ffa2 	bl	8000e74 <_ZN16FfbReportHandlerC1Ev>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d107      	bne.n	8000f46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000f42:	f7ff ffc1 	bl	8000ec8 <_ZN16FfbReportHandlerD1Ev>
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200006d8 	.word	0x200006d8

08000f54 <_GLOBAL__sub_I_ffbReportHandler>:
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff ffd7 	bl	8000f10 <_Z41__static_initialization_and_destruction_0ii>
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_GLOBAL__sub_D_ffbReportHandler>:
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ffcf 	bl	8000f10 <_Z41__static_initialization_and_destruction_0ii>
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 fe2b 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f873 	bl	8001068 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 fa21 	bl	80013c8 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000f86:	f000 f9c3 	bl	8001310 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8000f8a:	f000 f8e1 	bl	8001150 <_ZL12MX_TIM1_Initv>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f8e:	213c      	movs	r1, #60	; 0x3c
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <main+0xd0>)
 8000f92:	f003 f80f 	bl	8003fb4 <HAL_TIM_Encoder_Start>
  wheelController.begin();
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <main+0xd4>)
 8000f98:	f000 fcd9 	bl	800194e <_ZN15WheelController5beginEv>
  encoder.Encoder_Config();
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <main+0xd8>)
 8000f9e:	f7ff ff1d 	bl	8000ddc <_ZN7Encoder14Encoder_ConfigEv>
  encoder.Encoder_Init();
 8000fa2:	482a      	ldr	r0, [pc, #168]	; (800104c <main+0xd8>)
 8000fa4:	f7ff fea0 	bl	8000ce8 <_ZN7Encoder12Encoder_InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

   encoder.update();
 8000fa8:	4828      	ldr	r0, [pc, #160]	; (800104c <main+0xd8>)
 8000faa:	f7ff feed 	bl	8000d88 <_ZN7Encoder6updateEv>
   if (encoder.encoderValue >= encoderMaxValue) {
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <main+0xd8>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <main+0xdc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	db04      	blt.n	8000fc8 <main+0x54>
	   xAxisValue = encoderMaxValue;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <main+0xdc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <main+0xe0>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e014      	b.n	8000ff2 <main+0x7e>
   } else if (encoder.encoderValue < -encoderMaxValue){
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <main+0xd8>)
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <main+0xdc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	da05      	bge.n	8000fe6 <main+0x72>
	   xAxisValue = -encoderMaxValue;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <main+0xdc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	425b      	negs	r3, r3
 8000fe0:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <main+0xe0>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e005      	b.n	8000ff2 <main+0x7e>
   } else {
	   xAxisValue = encoder.encoderValue;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <main+0xd8>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <main+0xe0>)
 8000ff0:	601a      	str	r2, [r3, #0]
   }
   counter++;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <main+0xe4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <main+0xe4>)
 8000ffa:	6013      	str	r3, [r2, #0]

   wheelController.setX(mapInt(xAxisValue,-encoderMaxValue, encoderMaxValue, xAxisMinValue, xAxisMaxValue));
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <main+0xe0>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <main+0xdc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4259      	negs	r1, r3
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <main+0xdc>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <main+0xe8>)
 800100c:	681c      	ldr	r4, [r3, #0]
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <main+0xec>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4623      	mov	r3, r4
 8001016:	f000 fc41 	bl	800189c <mapInt>
 800101a:	4603      	mov	r3, r0
 800101c:	b21b      	sxth	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <main+0xd4>)
 8001022:	f000 fcb2 	bl	800198a <_ZN15WheelController4setXEs>
   wheelController.press(3);
 8001026:	2103      	movs	r1, #3
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0xd4>)
 800102a:	f000 fcbd 	bl	80019a8 <_ZN15WheelController5pressEt>
   wheelController.update();
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <main+0xd4>)
 8001030:	f000 fcda 	bl	80019e8 <_ZN15WheelController6updateEv>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET );
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <main+0xf0>)
 800103c:	f001 f90a 	bl	8002254 <HAL_GPIO_WritePin>
   encoder.update();
 8001040:	e7b2      	b.n	8000fa8 <main+0x34>
 8001042:	bf00      	nop
 8001044:	20000a88 	.word	0x20000a88
 8001048:	20000ac8 	.word	0x20000ac8
 800104c:	20000ad8 	.word	0x20000ad8
 8001050:	20000008 	.word	0x20000008
 8001054:	20000adc 	.word	0x20000adc
 8001058:	20000ae8 	.word	0x20000ae8
 800105c:	20000004 	.word	0x20000004
 8001060:	20000000 	.word	0x20000000
 8001064:	40020c00 	.word	0x40020c00

08001068 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f007 f9d3 	bl	8008422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <_Z18SystemClock_Configv+0xe0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <_Z18SystemClock_Configv+0xe0>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <_Z18SystemClock_Configv+0xe0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <_Z18SystemClock_Configv+0xe4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <_Z18SystemClock_Configv+0xe4>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <_Z18SystemClock_Configv+0xe4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fa34 	bl	800355c <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001104:	f000 fa32 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001114:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fc88 	bl	8003a3c <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf14      	ite	ne
 8001132:	2301      	movne	r3, #1
 8001134:	2300      	moveq	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800113c:	f000 fa16 	bl	800156c <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b096      	sub	sp, #88	; 0x58
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2220      	movs	r2, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f007 f94a 	bl	8008422 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118e:	4b5e      	ldr	r3, [pc, #376]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001190:	4a5e      	ldr	r2, [pc, #376]	; (800130c <_ZL12MX_TIM1_Initv+0x1bc>)
 8001192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001196:	220a      	movs	r2, #10
 8001198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 420;
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011a2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b54      	ldr	r3, [pc, #336]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4853      	ldr	r0, [pc, #332]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011bc:	f002 fe08 	bl	8003dd0 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80011d0:	f000 f9cc 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011de:	4619      	mov	r1, r3
 80011e0:	4849      	ldr	r0, [pc, #292]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011e2:	f003 f8ed 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80011f6:	f000 f9b9 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	4843      	ldr	r0, [pc, #268]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80011fc:	f002 fe13 	bl	8003e26 <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001210:	f000 f9ac 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001220:	4619      	mov	r1, r3
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001224:	f003 fcc6 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001238:	f000 f998 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123c:	2360      	movs	r3, #96	; 0x60
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4829      	ldr	r0, [pc, #164]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001262:	f002 ffe7 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001276:	f000 f979 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	2204      	movs	r2, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4821      	ldr	r0, [pc, #132]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 8001284:	f002 ffd6 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8001298:	f000 f968 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2208      	movs	r2, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	4818      	ldr	r0, [pc, #96]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80012a6:	f002 ffc5 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 80012ba:	f000 f957 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80012e2:	f003 fce3 	bl	8004cac <HAL_TIMEx_ConfigBreakDeadTime>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 80012f6:	f000 f939 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <_ZL12MX_TIM1_Initv+0x1b8>)
 80012fc:	f000 fa10 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3758      	adds	r7, #88	; 0x58
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000a48 	.word	0x20000a48
 800130c:	40010000 	.word	0x40010000

08001310 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2224      	movs	r2, #36	; 0x24
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f007 f87f 	bl	8008422 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001352:	2303      	movs	r3, #3
 8001354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	4811      	ldr	r0, [pc, #68]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 800137e:	f002 fd87 	bl	8003e90 <HAL_TIM_Encoder_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8001392:	f000 f8eb 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <_ZL12MX_TIM2_Initv+0xb4>)
 80013a4:	f003 fc06 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bf14      	ite	ne
 80013ae:	2301      	movne	r3, #1
 80013b0:	2300      	moveq	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80013b8:	f000 f8d8 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000a88 	.word	0x20000a88

080013c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a5b      	ldr	r2, [pc, #364]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b59      	ldr	r3, [pc, #356]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a54      	ldr	r2, [pc, #336]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b52      	ldr	r3, [pc, #328]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b40      	ldr	r3, [pc, #256]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a38      	ldr	r2, [pc, #224]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b36      	ldr	r3, [pc, #216]	; (8001554 <_ZL12MX_GPIO_Initv+0x18c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001486:	237c      	movs	r3, #124	; 0x7c
 8001488:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	482f      	ldr	r0, [pc, #188]	; (8001558 <_ZL12MX_GPIO_Initv+0x190>)
 800149a:	f000 fd41 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2 
                           PC3 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 800149e:	f643 030f 	movw	r3, #14351	; 0x380f
 80014a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <_ZL12MX_GPIO_Initv+0x194>)
 80014b4:	f000 fd34 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b8:	2304      	movs	r3, #4
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4825      	ldr	r0, [pc, #148]	; (8001560 <_ZL12MX_GPIO_Initv+0x198>)
 80014cc:	f000 fd28 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80014d0:	23f8      	movs	r3, #248	; 0xf8
 80014d2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	481f      	ldr	r0, [pc, #124]	; (8001560 <_ZL12MX_GPIO_Initv+0x198>)
 80014e4:	f000 fd1c 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014e8:	2330      	movs	r3, #48	; 0x30
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <_ZL12MX_GPIO_Initv+0x194>)
 80014fc:	f000 fd10 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <_ZL12MX_GPIO_Initv+0x19c>)
 8001514:	f000 fd04 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <_ZL12MX_GPIO_Initv+0x1a0>)
 800152c:	f000 fcf8 	bl	8001f20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001546:	f000 fceb 	bl	8001f20 <HAL_GPIO_Init>

}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40021000 	.word	0x40021000
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020c00 	.word	0x40020c00

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_Z41__static_initialization_and_destruction_0ii>:
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10a      	bne.n	80015a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001592:	4293      	cmp	r3, r2
 8001594:	d105      	bne.n	80015a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
WheelController wheelController;
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001598:	f000 f9c3 	bl	8001922 <_ZN15WheelControllerC1Ev>
Encoder encoder;
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800159e:	f7ff fb89 	bl	8000cb4 <_ZN7EncoderC1Ev>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d105      	bne.n	80015be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80015b4:	f7ff fb8c 	bl	8000cd0 <_ZN7EncoderD1Ev>
WheelController wheelController;
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80015ba:	f000 f9bd 	bl	8001938 <_ZN15WheelControllerD1Ev>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000ac8 	.word	0x20000ac8
 80015cc:	20000ad8 	.word	0x20000ad8

080015d0 <_GLOBAL__sub_I_htim1>:
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff ffcf 	bl	800157c <_Z41__static_initialization_and_destruction_0ii>
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_GLOBAL__sub_D_htim1>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ffc7 	bl	800157c <_Z41__static_initialization_and_destruction_0ii>
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_TIM_Base_MspInit+0x3c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10d      	bne.n	800166e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40010000 	.word	0x40010000
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d133      	bne.n	800170e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_TIM_Encoder_MspInit+0x94>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016de:	2303      	movs	r3, #3
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ee:	2301      	movs	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_TIM_Encoder_MspInit+0x98>)
 80016fa:	f000 fc11 	bl	8001f20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	201c      	movs	r0, #28
 8001704:	f000 fbd5 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001708:	201c      	movs	r0, #28
 800170a:	f000 fbee 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_TIM_MspPostInit+0x68>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11e      	bne.n	8001780 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800175e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001762:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_TIM_MspPostInit+0x70>)
 800177c:	f000 fbd0 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40021000 	.word	0x40021000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 fa46 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM2_IRQHandler+0x10>)
 80017f6:	f002 fc14 	bl	8004022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000a88 	.word	0x20000a88

08001804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <OTG_FS_IRQHandler+0x10>)
 800180a:	f000 fe8c 	bl	8002526 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000fd0 	.word	0x20000fd0

08001818 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x50>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x16>
		heap_end = &end;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <_sbrk+0x50>)
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <_sbrk+0x54>)
 800182c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <_sbrk+0x50>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <_sbrk+0x50>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	466a      	mov	r2, sp
 800183e:	4293      	cmp	r3, r2
 8001840:	d907      	bls.n	8001852 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001842:	f006 fda9 	bl	8008398 <__errno>
 8001846:	4602      	mov	r2, r0
 8001848:	230c      	movs	r3, #12
 800184a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e006      	b.n	8001860 <_sbrk+0x48>
	}

	heap_end += incr;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <_sbrk+0x50>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <_sbrk+0x50>)
 800185c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000aec 	.word	0x20000aec
 800186c:	200013e0 	.word	0x200013e0

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <SystemInit+0x28>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <SystemInit+0x28>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SystemInit+0x28>)
 8001886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800188a:	609a      	str	r2, [r3, #8]
#endif
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <mapInt>:
 *  Created on: Mar 18, 2020
 *      Author: HoanTV
 */
#include "usb_device.h"

int mapInt(int x, int in_min, int in_max, int out_min, int out_max){
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  return (int)(1.00*(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fddb 	bl	800046c <__aeabi_i2d>
 80018b6:	4604      	mov	r4, r0
 80018b8:	460d      	mov	r5, r1
 80018ba:	6a3a      	ldr	r2, [r7, #32]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fdd3 	bl	800046c <__aeabi_i2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	f7fe fe37 	bl	8000540 <__aeabi_dmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	4625      	mov	r5, r4
 80018d8:	461c      	mov	r4, r3
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fdc3 	bl	800046c <__aeabi_i2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe ff51 	bl	8000794 <__aeabi_ddiv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4625      	mov	r5, r4
 80018f8:	461c      	mov	r4, r3
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	f7fe fdb6 	bl	800046c <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fc64 	bl	80001d4 <__adddf3>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4618      	mov	r0, r3
 8001912:	4621      	mov	r1, r4
 8001914:	f7ff f826 	bl	8000964 <__aeabi_d2iz>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bdb0      	pop	{r4, r5, r7, pc}

08001922 <_ZN15WheelControllerC1Ev>:
 */
#include "wheel_controller.h"

extern USBD_HandleTypeDef hUsbDeviceFS;

WheelController::WheelController(){
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
}
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZN15WheelControllerD1Ev>:

WheelController::~WheelController(){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
}
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_ZN15WheelController5beginEv>:

void WheelController::begin(void) {
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	MX_USB_DEVICE_Init();
 8001956:	f006 f8cb 	bl	8007af0 <MX_USB_DEVICE_Init>
	end();
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f804 	bl	8001968 <_ZN15WheelController3endEv>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN15WheelController3endEv>:

void WheelController::end(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  memset(&_wheelreport, 0x00, sizeof(_wheelreport));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	220e      	movs	r2, #14
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fd53 	bl	8008422 <memset>
  update();
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f833 	bl	80019e8 <_ZN15WheelController6updateEv>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZN15WheelController4setXEs>:

void WheelController::setX(int16_t value){
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
	_wheelreport.xAxis = value;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	887a      	ldrh	r2, [r7, #2]
 800199a:	805a      	strh	r2, [r3, #2]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_ZN15WheelController5pressEt>:

void WheelController::setRZ(int16_t value){
	_wheelreport.rzAxis = value;
}

void WheelController::press(uint16_t b){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
	  if (b == 0) {
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <_ZN15WheelController5pressEt+0x1a>
    _wheelreport.buttons = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	801a      	strh	r2, [r3, #0]
  } else {
    _wheelreport.buttons |= (uint16_t)1 << (b - 1);
  }
}
 80019c0:	e00c      	b.n	80019dc <_ZN15WheelController5pressEt+0x34>
    _wheelreport.buttons |= (uint16_t)1 << (b - 1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	801a      	strh	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_ZN15WheelController6updateEv>:
	_wheelreport.buttons = 0;
}

#define AddAxisValue(m_val)		{data[i++] = m_val & 0xff; data[i++] = ((m_val & 0xff00) >> 8);}

void WheelController::update() {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	uint8_t data[15];
	int i=0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
	data[i++] = HID_REPORTID_WHEEL;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	61fa      	str	r2, [r7, #28]
 80019fa:	f107 0220 	add.w	r2, r7, #32
 80019fe:	4413      	add	r3, r2
 8001a00:	2201      	movs	r2, #1
 8001a02:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.buttons);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	61fa      	str	r2, [r7, #28]
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	f107 0120 	add.w	r1, r7, #32
 8001a18:	440b      	add	r3, r1
 8001a1a:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	1219      	asrs	r1, r3, #8
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	61fa      	str	r2, [r7, #28]
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	f107 0120 	add.w	r1, r7, #32
 8001a32:	440b      	add	r3, r1
 8001a34:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.xAxis);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	61fa      	str	r2, [r7, #28]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	f107 0120 	add.w	r1, r7, #32
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a56:	1219      	asrs	r1, r3, #8
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	61fa      	str	r2, [r7, #28]
 8001a5e:	b2ca      	uxtb	r2, r1
 8001a60:	f107 0120 	add.w	r1, r7, #32
 8001a64:	440b      	add	r3, r1
 8001a66:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.yAxis);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	61fa      	str	r2, [r7, #28]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	f107 0120 	add.w	r1, r7, #32
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a88:	1219      	asrs	r1, r3, #8
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	61fa      	str	r2, [r7, #28]
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	f107 0120 	add.w	r1, r7, #32
 8001a96:	440b      	add	r3, r1
 8001a98:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.zAxis);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	61fa      	str	r2, [r7, #28]
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	f107 0120 	add.w	r1, r7, #32
 8001aae:	440b      	add	r3, r1
 8001ab0:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001aba:	1219      	asrs	r1, r3, #8
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	61fa      	str	r2, [r7, #28]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	f107 0120 	add.w	r1, r7, #32
 8001ac8:	440b      	add	r3, r1
 8001aca:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.rxAxis);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	61fa      	str	r2, [r7, #28]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	f107 0120 	add.w	r1, r7, #32
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aec:	1219      	asrs	r1, r3, #8
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	61fa      	str	r2, [r7, #28]
 8001af4:	b2ca      	uxtb	r2, r1
 8001af6:	f107 0120 	add.w	r1, r7, #32
 8001afa:	440b      	add	r3, r1
 8001afc:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.rxAxis);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	f107 0120 	add.w	r1, r7, #32
 8001b12:	440b      	add	r3, r1
 8001b14:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b1e:	1219      	asrs	r1, r3, #8
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	61fa      	str	r2, [r7, #28]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	f107 0120 	add.w	r1, r7, #32
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f803 2c14 	strb.w	r2, [r3, #-20]
	AddAxisValue(_wheelreport.rzAxis);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	61fa      	str	r2, [r7, #28]
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	f107 0120 	add.w	r1, r7, #32
 8001b44:	440b      	add	r3, r1
 8001b46:	f803 2c14 	strb.w	r2, [r3, #-20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b50:	1219      	asrs	r1, r3, #8
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	61fa      	str	r2, [r7, #28]
 8001b58:	b2ca      	uxtb	r2, r1
 8001b5a:	f107 0120 	add.w	r1, r7, #32
 8001b5e:	440b      	add	r3, r1
 8001b60:	f803 2c14 	strb.w	r2, [r3, #-20]
	USBD_CUSTOM_HID_SendReport( &hUsbDeviceFS, (uint8_t*)&data, sizeof(data) );
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	220f      	movs	r2, #15
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <_ZN15WheelController6updateEv+0x194>)
 8001b6e:	f004 fdd1 	bl	8006714 <USBD_CUSTOM_HID_SendReport>
}
 8001b72:	bf00      	nop
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000b00 	.word	0x20000b00

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b86:	e003      	b.n	8001b90 <LoopCopyDataInit>

08001b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b8e:	3104      	adds	r1, #4

08001b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b98:	d3f6      	bcc.n	8001b88 <CopyDataInit>
  ldr  r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b9c:	e002      	b.n	8001ba4 <LoopFillZerobss>

08001b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba0:	f842 3b04 	str.w	r3, [r2], #4

08001ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ba8:	d3f9      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001baa:	f7ff fe61 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f006 fbf9 	bl	80083a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7ff f9df 	bl	8000f74 <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bbc:	08008648 	.word	0x08008648
  ldr  r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc4:	200006b8 	.word	0x200006b8
  ldr  r2, =_sbss
 8001bc8:	200006b8 	.word	0x200006b8
  ldr  r3, = _ebss
 8001bcc:	200013dc 	.word	0x200013dc

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_Init+0x40>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_Init+0x40>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x40>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f94d 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fcf2 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f965 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f92d 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	20000014 	.word	0x20000014
 8001c74:	20000010 	.word	0x20000010

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	20000afc 	.word	0x20000afc

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000afc 	.word	0x20000afc

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_Delay+0x40>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000014 	.word	0x20000014

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e16b      	b.n	8002214 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	f040 815a 	bne.w	800220e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d00b      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6e:	2b11      	cmp	r3, #17
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d130      	bne.n	8001fdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0201 	and.w	r2, r3, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0xfc>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d123      	bne.n	8002064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	69b9      	ldr	r1, [r7, #24]
 8002060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80b4 	beq.w	800220e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <HAL_GPIO_Init+0x308>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <HAL_GPIO_Init+0x308>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b5c      	ldr	r3, [pc, #368]	; (8002228 <HAL_GPIO_Init+0x308>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	4a5a      	ldr	r2, [pc, #360]	; (800222c <HAL_GPIO_Init+0x30c>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x310>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d02b      	beq.n	8002146 <HAL_GPIO_Init+0x226>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_GPIO_Init+0x314>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d025      	beq.n	8002142 <HAL_GPIO_Init+0x222>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_GPIO_Init+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01f      	beq.n	800213e <HAL_GPIO_Init+0x21e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4e      	ldr	r2, [pc, #312]	; (800223c <HAL_GPIO_Init+0x31c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d019      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <HAL_GPIO_Init+0x320>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_GPIO_Init+0x324>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00d      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <HAL_GPIO_Init+0x328>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x20e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4a      	ldr	r2, [pc, #296]	; (800224c <HAL_GPIO_Init+0x32c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_GPIO_Init+0x20a>
 8002126:	2307      	movs	r3, #7
 8002128:	e00e      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800212a:	2308      	movs	r3, #8
 800212c:	e00c      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800212e:	2306      	movs	r3, #6
 8002130:	e00a      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002132:	2305      	movs	r3, #5
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002136:	2304      	movs	r3, #4
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x228>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x228>
 8002146:	2300      	movs	r3, #0
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002158:	4934      	ldr	r1, [pc, #208]	; (800222c <HAL_GPIO_Init+0x30c>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_GPIO_Init+0x330>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218a:	4a31      	ldr	r2, [pc, #196]	; (8002250 <HAL_GPIO_Init+0x330>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_GPIO_Init+0x330>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_GPIO_Init+0x330>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_GPIO_Init+0x330>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_GPIO_Init+0x330>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_GPIO_Init+0x330>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_GPIO_Init+0x330>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	f67f ae90 	bls.w	8001f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3724      	adds	r7, #36	; 0x24
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40020800 	.word	0x40020800
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40013c00 	.word	0x40013c00

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002288:	b08f      	sub	sp, #60	; 0x3c
 800228a:	af0a      	add	r7, sp, #40	; 0x28
 800228c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e10f      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 fd86 	bl	8007dc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fe63 	bl	8004fa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	687e      	ldr	r6, [r7, #4]
 80022e4:	466d      	mov	r5, sp
 80022e6:	f106 0410 	add.w	r4, r6, #16
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022fa:	1d33      	adds	r3, r6, #4
 80022fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f002 fd3a 	bl	8004d78 <USB_CoreInit>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d0      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fe51 	bl	8004fc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e04a      	b.n	80023be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333d      	adds	r3, #61	; 0x3d
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	333c      	adds	r3, #60	; 0x3c
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	b298      	uxth	r0, r3
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3342      	adds	r3, #66	; 0x42
 8002364:	4602      	mov	r2, r0
 8002366:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	333f      	adds	r3, #63	; 0x3f
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3344      	adds	r3, #68	; 0x44
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3348      	adds	r3, #72	; 0x48
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3350      	adds	r3, #80	; 0x50
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3af      	bcc.n	8002328 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e044      	b.n	8002458 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3301      	adds	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3b5      	bcc.n	80023ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	687e      	ldr	r6, [r7, #4]
 800246a:	466d      	mov	r5, sp
 800246c:	f106 0410 	add.w	r4, r6, #16
 8002470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002478:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002480:	1d33      	adds	r3, r6, #4
 8002482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f002 fdc7 	bl	8005018 <USB_DevInit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00d      	b.n	80024b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fe06 	bl	80060c2 <USB_DevDisconnect>

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_Start+0x1c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e020      	b.n	800251e <HAL_PCD_Start+0x5e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d109      	bne.n	8002500 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d005      	beq.n	8002500 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fdc4 	bl	8006092 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fd36 	bl	8004f80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b08d      	sub	sp, #52	; 0x34
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f003 fe6b 	bl	8006218 <USB_GetMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 839d 	bne.w	8002c84 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fdcf 	bl	80060f2 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8393 	beq.w	8002c82 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f003 fdc6 	bl	80060f2 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d107      	bne.n	8002580 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f002 0202 	and.w	r2, r2, #2
 800257e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fdb4 	bl	80060f2 <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b10      	cmp	r3, #16
 8002592:	d161      	bne.n	8002658 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0210 	bic.w	r2, r2, #16
 80025a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	0c5b      	lsrs	r3, r3, #17
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d124      	bne.n	800261a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d035      	beq.n	8002648 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6a38      	ldr	r0, [r7, #32]
 80025f0:	f003 fc2c 	bl	8005e4c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002600:	441a      	add	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002612:	441a      	add	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	619a      	str	r2, [r3, #24]
 8002618:	e016      	b.n	8002648 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	0c5b      	lsrs	r3, r3, #17
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	2b06      	cmp	r3, #6
 8002624:	d110      	bne.n	8002648 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800262c:	2208      	movs	r2, #8
 800262e:	4619      	mov	r1, r3
 8002630:	6a38      	ldr	r0, [r7, #32]
 8002632:	f003 fc0b 	bl	8005e4c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002642:	441a      	add	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0210 	orr.w	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fd48 	bl	80060f2 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800266c:	d16e      	bne.n	800274c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fd4e 	bl	8006118 <USB_ReadDevAllOutEpInterrupt>
 800267c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267e:	e062      	b.n	8002746 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d057      	beq.n	800273a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f003 fd73 	bl	8006180 <USB_ReadDevOutEPInterrupt>
 800269a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fd98 	bl	80031f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2308      	movs	r3, #8
 80026da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fe92 	bl	8003408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fa:	461a      	mov	r2, r3
 80026fc:	2310      	movs	r3, #16
 80026fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2320      	movs	r3, #32
 800271a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	461a      	mov	r2, r3
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d199      	bne.n	8002680 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fcce 	bl	80060f2 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002760:	f040 80c0 	bne.w	80028e4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fcef 	bl	800614c <USB_ReadDevAllInEpInterrupt>
 800276e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002774:	e0b2      	b.n	80028dc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a7 	beq.w	80028d0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fd15 	bl	80061bc <USB_ReadDevInEPInterrupt>
 8002792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d057      	beq.n	800284e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027be:	4013      	ands	r3, r2
 80027c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d132      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3348      	adds	r3, #72	; 0x48
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3344      	adds	r3, #68	; 0x44
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4419      	add	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	3348      	adds	r3, #72	; 0x48
 8002812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3350      	adds	r3, #80	; 0x50
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800283a:	461a      	mov	r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	f003 fd1d 	bl	800627c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f005 fb3c 	bl	8007ec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b8:	461a      	mov	r2, r3
 80028ba:	2302      	movs	r3, #2
 80028bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fc03 	bl	80030d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3301      	adds	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f47f af49 	bne.w	8002776 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fc02 	bl	80060f2 <USB_ReadInterrupts>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f8:	d122      	bne.n	8002940 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002920:	2100      	movs	r1, #0
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fe0e 	bl	8003544 <HAL_PCDEx_LPM_Callback>
 8002928:	e002      	b.n	8002930 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f005 fb42 	bl	8007fb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fbd4 	bl	80060f2 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	d112      	bne.n	800297c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f005 fafe 	bl	8007f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800297a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fbb6 	bl	80060f2 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	f040 80c7 	bne.w	8002b22 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2110      	movs	r1, #16
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fc96 	bl	80052e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b8:	e056      	b.n	8002a68 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fe:	0151      	lsls	r1, r2, #5
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	440a      	add	r2, r1
 8002a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	0151      	lsls	r1, r2, #5
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	440a      	add	r2, r1
 8002a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	3301      	adds	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3a3      	bcc.n	80029ba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9e:	f043 030b 	orr.w	r3, r3, #11
 8002aa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab4:	f043 030b 	orr.w	r3, r3, #11
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	e015      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ace:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ad2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f043 030b 	orr.w	r3, r3, #11
 8002ae6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002afa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f003 fbb5 	bl	800627c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fae3 	bl	80060f2 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b36:	d124      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fb79 	bl	8006234 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fc2b 	bl	80053a2 <USB_GetDevSpeed>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681c      	ldr	r4, [r3, #0]
 8002b58:	f001 f92e 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f002 f968 	bl	8004e3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 f9d2 	bl	8007f16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fab3 	bl	80060f2 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d10a      	bne.n	8002bac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f005 f9af 	bl	8007efa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 0208 	and.w	r2, r2, #8
 8002baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fa9e 	bl	80060f2 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc0:	d10f      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f005 fa11 	bl	8007ff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fa83 	bl	80060f2 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf6:	d10f      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f005 f9e4 	bl	8007fd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fa68 	bl	80060f2 <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d10a      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f005 f9f2 	bl	8008018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 fa52 	bl	80060f2 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d115      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f005 f9e2 	bl	8008034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	e000      	b.n	8002c84 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c82:	bf00      	nop
    }
  }
}
 8002c84:	3734      	adds	r7, #52	; 0x34
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}

08002c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_SetAddress+0x1a>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e013      	b.n	8002ccc <HAL_PCD_SetAddress+0x42>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 f9c2 	bl	8006046 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	70fb      	strb	r3, [r7, #3]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	803b      	strh	r3, [r7, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0f      	bge.n	8002d1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	705a      	strb	r2, [r3, #1]
 8002d18:	e00f      	b.n	8002d3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d46:	883a      	ldrh	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	78ba      	ldrb	r2, [r7, #2]
 8002d50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d102      	bne.n	8002d70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_EP_Open+0xaa>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_Open+0xc8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fb2d 	bl	80053ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0f      	bge.n	8002dd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3338      	adds	r3, #56	; 0x38
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]
 8002dd6:	e00f      	b.n	8002df8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_EP_Close+0x6e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00e      	b.n	8002e30 <HAL_PCD_EP_Close+0x8c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 fb6b 	bl	80054fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d102      	bne.n	8002e94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	f002 fe46 	bl	8005b3c <USB_EP0StartXfer>
 8002eb0:	e008      	b.n	8002ec4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	f002 fbf8 	bl	80056b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	460b      	mov	r3, r1
 8002edc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	7afb      	ldrb	r3, [r7, #11]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3338      	adds	r3, #56	; 0x38
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6979      	ldr	r1, [r7, #20]
 8002f40:	f002 fdfc 	bl	8005b3c <USB_EP0StartXfer>
 8002f44:	e008      	b.n	8002f58 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	f002 fbae 	bl	80056b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d901      	bls.n	8002f80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e050      	b.n	8003022 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da0f      	bge.n	8002fa8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3338      	adds	r3, #56	; 0x38
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	705a      	strb	r2, [r3, #1]
 8002fa6:	e00d      	b.n	8002fc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_PCD_EP_SetStall+0x82>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e01e      	b.n	8003022 <HAL_PCD_EP_SetStall+0xc0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 ff53 	bl	8005e9e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	b2d9      	uxtb	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003012:	461a      	mov	r2, r3
 8003014:	f003 f932 	bl	800627c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d901      	bls.n	8003048 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e042      	b.n	80030ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da0f      	bge.n	8003070 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	705a      	strb	r2, [r3, #1]
 800306e:	e00f      	b.n	8003090 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_EP_ClrStall+0x86>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e00e      	b.n	80030ce <HAL_PCD_EP_ClrStall+0xa4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 ff5b 	bl	8005f7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b08a      	sub	sp, #40	; 0x28
 80030da:	af02      	add	r7, sp, #8
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3338      	adds	r3, #56	; 0x38
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	429a      	cmp	r2, r3
 8003108:	d901      	bls.n	800310e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06c      	b.n	80031e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d902      	bls.n	800312a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3303      	adds	r3, #3
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003132:	e02b      	b.n	800318c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	429a      	cmp	r2, r3
 8003148:	d902      	bls.n	8003150 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3303      	adds	r3, #3
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68d9      	ldr	r1, [r3, #12]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003168:	b2db      	uxtb	r3, r3
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4603      	mov	r3, r0
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f002 fe37 	bl	8005de2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	b29b      	uxth	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d809      	bhi.n	80031b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d203      	bcs.n	80031b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1be      	bne.n	8003134 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d811      	bhi.n	80031e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	2201      	movs	r2, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	43db      	mvns	r3, r3
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e2:	4013      	ands	r3, r2
 80031e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	333c      	adds	r3, #60	; 0x3c
 8003208:	3304      	adds	r3, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	f040 80a0 	bne.w	8003368 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a72      	ldr	r2, [pc, #456]	; (8003400 <PCD_EP_OutXfrComplete_int+0x210>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f240 80dd 	bls.w	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80d7 	beq.w	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e0cb      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	2320      	movs	r3, #32
 8003278:	6093      	str	r3, [r2, #8]
 800327a:	e0bc      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80b7 	bne.w	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a5d      	ldr	r2, [pc, #372]	; (8003400 <PCD_EP_OutXfrComplete_int+0x210>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d90f      	bls.n	80032b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	461a      	mov	r2, r3
 80032a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ac:	6093      	str	r3, [r2, #8]
 80032ae:	e0a2      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	0159      	lsls	r1, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	440b      	add	r3, r1
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4403      	add	r3, r0
 80032e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4403      	add	r3, r0
 800330e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4419      	add	r1, r3
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4403      	add	r3, r0
 8003324:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003328:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d114      	bne.n	800335a <PCD_EP_OutXfrComplete_int+0x16a>
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003352:	461a      	mov	r2, r3
 8003354:	2101      	movs	r1, #1
 8003356:	f002 ff91 	bl	800627c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f004 fd95 	bl	8007e90 <HAL_PCD_DataOutStageCallback>
 8003366:	e046      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a26      	ldr	r2, [pc, #152]	; (8003404 <PCD_EP_OutXfrComplete_int+0x214>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d124      	bne.n	80033ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	461a      	mov	r2, r3
 8003388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338c:	6093      	str	r3, [r2, #8]
 800338e:	e032      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	2320      	movs	r3, #32
 80033aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f004 fd6c 	bl	8007e90 <HAL_PCD_DataOutStageCallback>
 80033b8:	e01d      	b.n	80033f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d114      	bne.n	80033ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033e2:	461a      	mov	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f002 ff49 	bl	800627c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f004 fd4d 	bl	8007e90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	4f54300a 	.word	0x4f54300a
 8003404:	4f54310a 	.word	0x4f54310a

08003408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <PCD_EP_OutSetupPacket_int+0x88>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d90e      	bls.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f004 fd05 	bl	8007e6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <PCD_EP_OutSetupPacket_int+0x88>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d90c      	bls.n	8003484 <PCD_EP_OutSetupPacket_int+0x7c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800347c:	461a      	mov	r2, r3
 800347e:	2101      	movs	r1, #1
 8003480:	f002 fefc 	bl	800627c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	4f54300a 	.word	0x4f54300a

08003494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034b2:	883b      	ldrh	r3, [r7, #0]
 80034b4:	0419      	lsls	r1, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	430a      	orrs	r2, r1
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	e028      	b.n	8003514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4413      	add	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e00d      	b.n	80034f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	3301      	adds	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d3ec      	bcc.n	80034d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034fc:	883b      	ldrh	r3, [r7, #0]
 80034fe:	0418      	lsls	r0, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	3b01      	subs	r3, #1
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4302      	orrs	r2, r0
 800350c:	3340      	adds	r3, #64	; 0x40
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e25b      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4ba3      	ldr	r3, [pc, #652]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4ba0      	ldr	r3, [pc, #640]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b9d      	ldr	r3, [pc, #628]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e236      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a90      	ldr	r2, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fb44 	bl	8001ca0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe fb40 	bl	8001ca0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1fb      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fb30 	bl	8001ca0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fb2c 	bl	8001ca0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1e7      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b62      	ldr	r3, [pc, #392]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1bb      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4952      	ldr	r1, [pc, #328]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe fae5 	bl	8001ca0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe fae1 	bl	8001ca0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e19c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4940      	ldr	r1, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fac4 	bl	8001ca0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7fe fac0 	bl	8001ca0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e17b      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d030      	beq.n	80037a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe faa4 	bl	8001ca0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7fe faa0 	bl	8001ca0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e15b      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e015      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fa8d 	bl	8001ca0 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7fe fa89 	bl	8001ca0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e144      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a0 	beq.w	80038f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe fa4f 	bl	8001ca0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e011      	b.n	800382a <HAL_RCC_OscConfig+0x2ce>
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	42470000 	.word	0x42470000
 8003810:	42470e80 	.word	0x42470e80
 8003814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003818:	f7fe fa42 	bl	8001ca0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0fd      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_RCC_OscConfig+0x4d4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
 800384a:	e01c      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10c      	bne.n	800386e <HAL_RCC_OscConfig+0x312>
 8003854:	4b77      	ldr	r3, [pc, #476]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a76      	ldr	r2, [pc, #472]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	4b74      	ldr	r3, [pc, #464]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a73      	ldr	r2, [pc, #460]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800386e:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a70      	ldr	r2, [pc, #448]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b6e      	ldr	r3, [pc, #440]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a6d      	ldr	r2, [pc, #436]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fe fa07 	bl	8001ca0 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fa03 	bl	8001ca0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0bc      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCC_OscConfig+0x33a>
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe f9f1 	bl	8001ca0 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe f9ed 	bl	8001ca0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0a6      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b52      	ldr	r3, [pc, #328]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8092 	beq.w	8003a24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003900:	4b4c      	ldr	r3, [pc, #304]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d05c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d141      	bne.n	8003998 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <HAL_RCC_OscConfig+0x4dc>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe f9c1 	bl	8001ca0 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe f9bd 	bl	8001ca0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e078      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	019b      	lsls	r3, r3, #6
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	4933      	ldr	r1, [pc, #204]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCC_OscConfig+0x4dc>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe f996 	bl	8001ca0 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe f992 	bl	8001ca0 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04d      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x41c>
 8003996:	e045      	b.n	8003a24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_OscConfig+0x4dc>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe f97f 	bl	8001ca0 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe f97b 	bl	8001ca0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e036      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x44a>
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e029      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_RCC_OscConfig+0x4d8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d115      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10d      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40007000 	.word	0x40007000
 8003a34:	40023800 	.word	0x40023800
 8003a38:	42470060 	.word	0x42470060

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0cc      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d90c      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e067      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4934      	ldr	r1, [pc, #208]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe f8b8 	bl	8001ca0 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe f8b4 	bl	8001ca0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20c      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f821 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
 8003bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe f818 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08008618 	.word	0x08008618
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	20000010 	.word	0x20000010

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d007      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x32>
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x38>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 80b4 	bne.w	8003d9c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c36:	60bb      	str	r3, [r7, #8]
       break;
 8003c38:	e0b3      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3a:	4b5e      	ldr	r3, [pc, #376]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c3c:	60bb      	str	r3, [r7, #8]
      break;
 8003c3e:	e0b0      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4b5a      	ldr	r3, [pc, #360]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04a      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b55      	ldr	r3, [pc, #340]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	f04f 0400 	mov.w	r4, #0
 8003c60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	ea03 0501 	and.w	r5, r3, r1
 8003c6c:	ea04 0602 	and.w	r6, r4, r2
 8003c70:	4629      	mov	r1, r5
 8003c72:	4632      	mov	r2, r6
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	f04f 0400 	mov.w	r4, #0
 8003c7c:	0154      	lsls	r4, r2, #5
 8003c7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c82:	014b      	lsls	r3, r1, #5
 8003c84:	4619      	mov	r1, r3
 8003c86:	4622      	mov	r2, r4
 8003c88:	1b49      	subs	r1, r1, r5
 8003c8a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	0194      	lsls	r4, r2, #6
 8003c98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c9c:	018b      	lsls	r3, r1, #6
 8003c9e:	1a5b      	subs	r3, r3, r1
 8003ca0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	00e2      	lsls	r2, r4, #3
 8003cae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cb2:	00d9      	lsls	r1, r3, #3
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4614      	mov	r4, r2
 8003cb8:	195b      	adds	r3, r3, r5
 8003cba:	eb44 0406 	adc.w	r4, r4, r6
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	0262      	lsls	r2, r4, #9
 8003cc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ccc:	0259      	lsls	r1, r3, #9
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	f7fc fe68 	bl	80009b4 <__aeabi_uldivmod>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e049      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	ea03 0501 	and.w	r5, r3, r1
 8003d02:	ea04 0602 	and.w	r6, r4, r2
 8003d06:	4629      	mov	r1, r5
 8003d08:	4632      	mov	r2, r6
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	0154      	lsls	r4, r2, #5
 8003d14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d18:	014b      	lsls	r3, r1, #5
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	1b49      	subs	r1, r1, r5
 8003d20:	eb62 0206 	sbc.w	r2, r2, r6
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	f04f 0400 	mov.w	r4, #0
 8003d2c:	0194      	lsls	r4, r2, #6
 8003d2e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d32:	018b      	lsls	r3, r1, #6
 8003d34:	1a5b      	subs	r3, r3, r1
 8003d36:	eb64 0402 	sbc.w	r4, r4, r2
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	00e2      	lsls	r2, r4, #3
 8003d44:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d48:	00d9      	lsls	r1, r3, #3
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	195b      	adds	r3, r3, r5
 8003d50:	eb44 0406 	adc.w	r4, r4, r6
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	02a2      	lsls	r2, r4, #10
 8003d5e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d62:	0299      	lsls	r1, r3, #10
 8003d64:	460b      	mov	r3, r1
 8003d66:	4614      	mov	r4, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	461a      	mov	r2, r3
 8003d74:	4623      	mov	r3, r4
 8003d76:	f7fc fe1d 	bl	80009b4 <__aeabi_uldivmod>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	60bb      	str	r3, [r7, #8]
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d9e:	60bb      	str	r3, [r7, #8]
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	68bb      	ldr	r3, [r7, #8]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e01d      	b.n	8003e1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fc22 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 fbc0 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e01d      	b.n	8003e74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f815 	bl	8003e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fb95 	bl	8004594 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e083      	b.n	8003fac <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fd fbe3 	bl	8001684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 fb55 	bl	8004594 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	4313      	orrs	r3, r2
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f30:	f023 030c 	bic.w	r3, r3, #12
 8003f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	011a      	lsls	r2, r3, #4
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	031b      	lsls	r3, r3, #12
 8003f60:	4313      	orrs	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	4313      	orrs	r3, r2
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_TIM_Encoder_Start+0x16>
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d008      	beq.n	8003fda <HAL_TIM_Encoder_Start+0x26>
 8003fc8:	e00f      	b.n	8003fea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fdc8 	bl	8004b68 <TIM_CCxChannelCmd>
      break;
 8003fd8:	e016      	b.n	8004008 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fdc0 	bl	8004b68 <TIM_CCxChannelCmd>
      break;
 8003fe8:	e00e      	b.n	8004008 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fdb8 	bl	8004b68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2104      	movs	r1, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fdb1 	bl	8004b68 <TIM_CCxChannelCmd>
      break;
 8004006:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d122      	bne.n	800407e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d11b      	bne.n	800407e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0202 	mvn.w	r2, #2
 800404e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa76 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 800406a:	e005      	b.n	8004078 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa68 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa79 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d122      	bne.n	80040d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d11b      	bne.n	80040d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0204 	mvn.w	r2, #4
 80040a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa4c 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 80040be:	e005      	b.n	80040cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa3e 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa4f 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d122      	bne.n	8004126 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11b      	bne.n	8004126 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0208 	mvn.w	r2, #8
 80040f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2204      	movs	r2, #4
 80040fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa22 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004112:	e005      	b.n	8004120 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fa14 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa25 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d122      	bne.n	800417a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b10      	cmp	r3, #16
 8004140:	d11b      	bne.n	800417a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0210 	mvn.w	r2, #16
 800414a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2208      	movs	r2, #8
 8004150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f9f8 	bl	8004556 <HAL_TIM_IC_CaptureCallback>
 8004166:	e005      	b.n	8004174 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f9ea 	bl	8004542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9fb 	bl	800456a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10e      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f06f 0201 	mvn.w	r2, #1
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f9c4 	bl	800452e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d10e      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fdc9 	bl	8004d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d10e      	bne.n	80041fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d107      	bne.n	80041fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f9c0 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b20      	cmp	r3, #32
 800420a:	d10e      	bne.n	800422a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d107      	bne.n	800422a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f06f 0220 	mvn.w	r2, #32
 8004222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fd93 	bl	8004d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800424a:	2302      	movs	r3, #2
 800424c:	e0b4      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	f200 809f 	bhi.w	80043a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080043a5 	.word	0x080043a5
 8004274:	080043a5 	.word	0x080043a5
 8004278:	080043a5 	.word	0x080043a5
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080043a5 	.word	0x080043a5
 8004284:	080043a5 	.word	0x080043a5
 8004288:	080043a5 	.word	0x080043a5
 800428c:	08004323 	.word	0x08004323
 8004290:	080043a5 	.word	0x080043a5
 8004294:	080043a5 	.word	0x080043a5
 8004298:	080043a5 	.word	0x080043a5
 800429c:	08004363 	.word	0x08004363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fa14 	bl	80046d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0204 	bic.w	r2, r2, #4
 80042ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6999      	ldr	r1, [r3, #24]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
      break;
 80042de:	e062      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fa64 	bl	80047b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	021a      	lsls	r2, r3, #8
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]
      break;
 8004320:	e041      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fab9 	bl	80048a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0208 	orr.w	r2, r2, #8
 800433c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0204 	bic.w	r2, r2, #4
 800434c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69d9      	ldr	r1, [r3, #28]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
      break;
 8004360:	e021      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fb0d 	bl	8004988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69d9      	ldr	r1, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	61da      	str	r2, [r3, #28]
      break;
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80043a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0a6      	b.n	8004526 <HAL_TIM_ConfigClockSource+0x166>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d067      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0x120>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d80b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x6c>
 8004414:	2b10      	cmp	r3, #16
 8004416:	d073      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x140>
 8004418:	2b10      	cmp	r3, #16
 800441a:	d802      	bhi.n	8004422 <HAL_TIM_ConfigClockSource+0x62>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d06f      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004420:	e078      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004422:	2b20      	cmp	r3, #32
 8004424:	d06c      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x140>
 8004426:	2b30      	cmp	r3, #48	; 0x30
 8004428:	d06a      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800442a:	e073      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800442c:	2b70      	cmp	r3, #112	; 0x70
 800442e:	d00d      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x8c>
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d804      	bhi.n	800443e <HAL_TIM_ConfigClockSource+0x7e>
 8004434:	2b50      	cmp	r3, #80	; 0x50
 8004436:	d033      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0xe0>
 8004438:	2b60      	cmp	r3, #96	; 0x60
 800443a:	d041      	beq.n	80044c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800443c:	e06a      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	d066      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0x152>
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004448:	d017      	beq.n	800447a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800444a:	e063      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f000 fb64 	bl	8004b28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800446e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]
      break;
 8004478:	e04c      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f000 fb4d 	bl	8004b28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449c:	609a      	str	r2, [r3, #8]
      break;
 800449e:	e039      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	461a      	mov	r2, r3
 80044ae:	f000 fac1 	bl	8004a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2150      	movs	r1, #80	; 0x50
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb1a 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80044be:	e029      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f000 fae0 	bl	8004a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2160      	movs	r1, #96	; 0x60
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fb0a 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80044de:	e019      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	461a      	mov	r2, r3
 80044ee:	f000 faa1 	bl	8004a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fafa 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80044fe:	e009      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f000 faf1 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 8004510:	e000      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a40      	ldr	r2, [pc, #256]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3d      	ldr	r2, [pc, #244]	; (80046ac <TIM_Base_SetConfig+0x118>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3c      	ldr	r2, [pc, #240]	; (80046b0 <TIM_Base_SetConfig+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3b      	ldr	r2, [pc, #236]	; (80046b4 <TIM_Base_SetConfig+0x120>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a3a      	ldr	r2, [pc, #232]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d027      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <TIM_Base_SetConfig+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d023      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2b      	ldr	r2, [pc, #172]	; (80046b0 <TIM_Base_SetConfig+0x11c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <TIM_Base_SetConfig+0x120>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d017      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <TIM_Base_SetConfig+0x128>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <TIM_Base_SetConfig+0x12c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00f      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <TIM_Base_SetConfig+0x130>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00b      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <TIM_Base_SetConfig+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <TIM_Base_SetConfig+0x138>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <TIM_Base_SetConfig+0x13c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d108      	bne.n	8004658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <TIM_Base_SetConfig+0x114>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0xf8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <TIM_Base_SetConfig+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	615a      	str	r2, [r3, #20]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40010400 	.word	0x40010400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40001800 	.word	0x40001800
 80046cc:	40001c00 	.word	0x40001c00
 80046d0:	40002000 	.word	0x40002000

080046d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 0302 	bic.w	r3, r3, #2
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a20      	ldr	r2, [pc, #128]	; (80047ac <TIM_OC1_SetConfig+0xd8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC1_SetConfig+0x64>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <TIM_OC1_SetConfig+0xdc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10c      	bne.n	8004752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0308 	bic.w	r3, r3, #8
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <TIM_OC1_SetConfig+0xd8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC1_SetConfig+0x8e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <TIM_OC1_SetConfig+0xdc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d111      	bne.n	8004786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40010400 	.word	0x40010400

080047b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0210 	bic.w	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0320 	bic.w	r3, r3, #32
 80047fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <TIM_OC2_SetConfig+0xe4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_OC2_SetConfig+0x68>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_OC2_SetConfig+0xe8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10d      	bne.n	8004838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <TIM_OC2_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC2_SetConfig+0x94>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <TIM_OC2_SetConfig+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d113      	bne.n	8004870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40010000 	.word	0x40010000
 800489c:	40010400 	.word	0x40010400

080048a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a21      	ldr	r2, [pc, #132]	; (8004980 <TIM_OC3_SetConfig+0xe0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_OC3_SetConfig+0x66>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <TIM_OC3_SetConfig+0xe4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10d      	bne.n	8004922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a16      	ldr	r2, [pc, #88]	; (8004980 <TIM_OC3_SetConfig+0xe0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_OC3_SetConfig+0x92>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <TIM_OC3_SetConfig+0xe4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d113      	bne.n	800495a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	621a      	str	r2, [r3, #32]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400

08004988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <TIM_OC4_SetConfig+0xa4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC4_SetConfig+0x68>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <TIM_OC4_SetConfig+0xa8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40010400 	.word	0x40010400

08004a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 030a 	bic.w	r3, r3, #10
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0210 	bic.w	r2, r3, #16
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f043 0307 	orr.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e05a      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e03d      	b.n	8004d44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f107 001c 	add.w	r0, r7, #28
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d122      	bne.n	8004dd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fab4 	bl	8006338 <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e01a      	b.n	8004e0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 faa8 	bl	8006338 <USB_CoreReset>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dfe:	e005      	b.n	8004e0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10b      	bne.n	8004e2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f043 0206 	orr.w	r2, r3, #6
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e36:	b004      	add	sp, #16
 8004e38:	4770      	bx	lr
	...

08004e3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d165      	bne.n	8004f1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <USB_SetTurnaroundTime+0x11c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d906      	bls.n	8004e66 <USB_SetTurnaroundTime+0x2a>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <USB_SetTurnaroundTime+0x120>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d802      	bhi.n	8004e66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e60:	230f      	movs	r3, #15
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e062      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a3c      	ldr	r2, [pc, #240]	; (8004f5c <USB_SetTurnaroundTime+0x120>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d906      	bls.n	8004e7c <USB_SetTurnaroundTime+0x40>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a3b      	ldr	r2, [pc, #236]	; (8004f60 <USB_SetTurnaroundTime+0x124>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d802      	bhi.n	8004e7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e76:	230e      	movs	r3, #14
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e057      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <USB_SetTurnaroundTime+0x124>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d906      	bls.n	8004e92 <USB_SetTurnaroundTime+0x56>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a37      	ldr	r2, [pc, #220]	; (8004f64 <USB_SetTurnaroundTime+0x128>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d802      	bhi.n	8004e92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e8c:	230d      	movs	r3, #13
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e04c      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a33      	ldr	r2, [pc, #204]	; (8004f64 <USB_SetTurnaroundTime+0x128>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d906      	bls.n	8004ea8 <USB_SetTurnaroundTime+0x6c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a32      	ldr	r2, [pc, #200]	; (8004f68 <USB_SetTurnaroundTime+0x12c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d802      	bhi.n	8004ea8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e041      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <USB_SetTurnaroundTime+0x12c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d906      	bls.n	8004ebe <USB_SetTurnaroundTime+0x82>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <USB_SetTurnaroundTime+0x130>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d802      	bhi.n	8004ebe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004eb8:	230b      	movs	r3, #11
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e036      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <USB_SetTurnaroundTime+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d906      	bls.n	8004ed4 <USB_SetTurnaroundTime+0x98>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <USB_SetTurnaroundTime+0x134>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d802      	bhi.n	8004ed4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ece:	230a      	movs	r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e02b      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <USB_SetTurnaroundTime+0x134>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d906      	bls.n	8004eea <USB_SetTurnaroundTime+0xae>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <USB_SetTurnaroundTime+0x138>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d802      	bhi.n	8004eea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ee4:	2309      	movs	r3, #9
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e020      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <USB_SetTurnaroundTime+0x138>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d906      	bls.n	8004f00 <USB_SetTurnaroundTime+0xc4>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <USB_SetTurnaroundTime+0x13c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d802      	bhi.n	8004f00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004efa:	2308      	movs	r3, #8
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e015      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a1d      	ldr	r2, [pc, #116]	; (8004f78 <USB_SetTurnaroundTime+0x13c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d906      	bls.n	8004f16 <USB_SetTurnaroundTime+0xda>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <USB_SetTurnaroundTime+0x140>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d802      	bhi.n	8004f16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f10:	2307      	movs	r3, #7
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	e00a      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f16:	2306      	movs	r3, #6
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e007      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f22:	2309      	movs	r3, #9
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e001      	b.n	8004f2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f28:	2309      	movs	r3, #9
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	00d8acbf 	.word	0x00d8acbf
 8004f5c:	00e4e1bf 	.word	0x00e4e1bf
 8004f60:	00f423ff 	.word	0x00f423ff
 8004f64:	0106737f 	.word	0x0106737f
 8004f68:	011a499f 	.word	0x011a499f
 8004f6c:	01312cff 	.word	0x01312cff
 8004f70:	014ca43f 	.word	0x014ca43f
 8004f74:	016e35ff 	.word	0x016e35ff
 8004f78:	01a6ab1f 	.word	0x01a6ab1f
 8004f7c:	01e847ff 	.word	0x01e847ff

08004f80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f043 0201 	orr.w	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d106      	bne.n	8004ff0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e00b      	b.n	8005008 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	e001      	b.n	8005008 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e003      	b.n	8005010 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005008:	2032      	movs	r0, #50	; 0x32
 800500a:	f7fc fe55 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e009      	b.n	800504c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3340      	adds	r3, #64	; 0x40
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0e      	cmp	r3, #14
 8005050:	d9f2      	bls.n	8005038 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11c      	bne.n	8005092 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
 8005090:	e00b      	b.n	80050aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050b0:	461a      	mov	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	4619      	mov	r1, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	461a      	mov	r2, r3
 80050c6:	680b      	ldr	r3, [r1, #0]
 80050c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d10c      	bne.n	80050ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050d6:	2100      	movs	r1, #0
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f949 	bl	8005370 <USB_SetDevSpeed>
 80050de:	e008      	b.n	80050f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050e0:	2101      	movs	r1, #1
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f944 	bl	8005370 <USB_SetDevSpeed>
 80050e8:	e003      	b.n	80050f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050ea:	2103      	movs	r1, #3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f93f 	bl	8005370 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050f2:	2110      	movs	r1, #16
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8f3 	bl	80052e0 <USB_FlushTxFifo>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f911 	bl	800532c <USB_FlushRxFifo>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	e043      	b.n	80051c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005154:	d118      	bne.n	8005188 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e013      	b.n	800519a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e008      	b.n	800519a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3301      	adds	r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3b7      	bcc.n	800513e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e043      	b.n	800525c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ea:	d118      	bne.n	800521e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e013      	b.n	8005230 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	461a      	mov	r2, r3
 8005216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e008      	b.n	8005230 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	461a      	mov	r2, r3
 800523e:	2300      	movs	r3, #0
 8005240:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005254:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d3b7      	bcc.n	80051d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005276:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005284:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f043 0210 	orr.w	r2, r3, #16
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <USB_DevInit+0x2c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f043 0208 	orr.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d8:	b004      	add	sp, #16
 80052da:	4770      	bx	lr
 80052dc:	803c3800 	.word	0x803c3800

080052e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a09      	ldr	r2, [pc, #36]	; (8005328 <USB_FlushTxFifo+0x48>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e006      	b.n	800531a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d0f0      	beq.n	80052fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	00030d40 	.word	0x00030d40

0800532c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2210      	movs	r2, #16
 800533c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3301      	adds	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a09      	ldr	r2, [pc, #36]	; (800536c <USB_FlushRxFifo+0x40>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e006      	b.n	800535e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b10      	cmp	r3, #16
 800535a:	d0f0      	beq.n	800533e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	00030d40 	.word	0x00030d40

08005370 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0306 	and.w	r3, r3, #6
 80053ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
 80053c6:	e00a      	b.n	80053de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d002      	beq.n	80053d4 <USB_GetDevSpeed+0x32>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d102      	bne.n	80053da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053d4:	2302      	movs	r3, #2
 80053d6:	75fb      	strb	r3, [r7, #23]
 80053d8:	e001      	b.n	80053de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053da:	230f      	movs	r3, #15
 80053dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053de:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d13a      	bne.n	800547e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d155      	bne.n	80054ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800545c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	059b      	lsls	r3, r3, #22
 8005462:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005464:	4313      	orrs	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e036      	b.n	80054ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	2101      	movs	r1, #1
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11a      	bne.n	80054ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054d2:	430b      	orrs	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d161      	bne.n	80055dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552e:	d11f      	bne.n	8005570 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4013      	ands	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b35      	ldr	r3, [pc, #212]	; (80056ac <USB_DeactivateEndpoint+0x1b0>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	e060      	b.n	800569e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d11f      	bne.n	8005634 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005612:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005632:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	43db      	mvns	r3, r3
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005654:	4013      	ands	r3, r2
 8005656:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	43db      	mvns	r3, r3
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005678:	4013      	ands	r3, r2
 800567a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0159      	lsls	r1, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	440b      	add	r3, r1
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	4619      	mov	r1, r3
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <USB_DeactivateEndpoint+0x1b4>)
 800569a:	4013      	ands	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	ec337800 	.word	0xec337800
 80056b0:	eff37800 	.word	0xeff37800

080056b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 815c 	bne.w	800598e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d132      	bne.n	8005744 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	0cdb      	lsrs	r3, r3, #19
 800573e:	04db      	lsls	r3, r3, #19
 8005740:	6113      	str	r3, [r2, #16]
 8005742:	e074      	b.n	800582e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	0cdb      	lsrs	r3, r3, #19
 8005760:	04db      	lsls	r3, r3, #19
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005782:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6959      	ldr	r1, [r3, #20]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	440b      	add	r3, r1
 80057a0:	1e59      	subs	r1, r3, #1
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057aa:	04d9      	lsls	r1, r3, #19
 80057ac:	4b9d      	ldr	r3, [pc, #628]	; (8005a24 <USB_EPStartXfer+0x370>)
 80057ae:	400b      	ands	r3, r1
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	0148      	lsls	r0, r1, #5
 80057b4:	69f9      	ldr	r1, [r7, #28]
 80057b6:	4401      	add	r1, r0
 80057b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d6:	69b9      	ldr	r1, [r7, #24]
 80057d8:	0148      	lsls	r0, r1, #5
 80057da:	69f9      	ldr	r1, [r7, #28]
 80057dc:	4401      	add	r1, r0
 80057de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057e2:	4313      	orrs	r3, r2
 80057e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d11f      	bne.n	800582e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005808:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800580c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d14b      	bne.n	80058cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	78db      	ldrb	r3, [r3, #3]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d128      	bne.n	80058aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d110      	bne.n	800588a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e00f      	b.n	80058aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e12f      	b.n	8005b2c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d015      	beq.n	8005920 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8117 	beq.w	8005b2c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	69f9      	ldr	r1, [r7, #28]
 8005916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591a:	4313      	orrs	r3, r2
 800591c:	634b      	str	r3, [r1, #52]	; 0x34
 800591e:	e105      	b.n	8005b2c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d110      	bne.n	8005952 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e00f      	b.n	8005972 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005970:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	68d9      	ldr	r1, [r3, #12]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	b298      	uxth	r0, r3
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4603      	mov	r3, r0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa2b 	bl	8005de2 <USB_WritePacket>
 800598c:	e0ce      	b.n	8005b2c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a8:	0cdb      	lsrs	r3, r3, #19
 80059aa:	04db      	lsls	r3, r3, #19
 80059ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d126      	bne.n	8005a28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	0148      	lsls	r0, r1, #5
 80059f4:	69f9      	ldr	r1, [r7, #28]
 80059f6:	4401      	add	r1, r0
 80059f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059fc:	4313      	orrs	r3, r2
 80059fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1e:	6113      	str	r3, [r2, #16]
 8005a20:	e036      	b.n	8005a90 <USB_EPStartXfer+0x3dc>
 8005a22:	bf00      	nop
 8005a24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	4b39      	ldr	r3, [pc, #228]	; (8005b38 <USB_EPStartXfer+0x484>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	69b9      	ldr	r1, [r7, #24]
 8005a56:	0148      	lsls	r0, r1, #5
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	4401      	add	r1, r0
 8005a5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	8af9      	ldrh	r1, [r7, #22]
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a80:	69b9      	ldr	r1, [r7, #24]
 8005a82:	0148      	lsls	r0, r1, #5
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	4401      	add	r1, r0
 8005a88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10d      	bne.n	8005ab2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	460a      	mov	r2, r1
 8005ab0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d128      	bne.n	8005b0c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d110      	bne.n	8005aec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e00f      	b.n	8005b0c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	1ff80000 	.word	0x1ff80000

08005b3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 80cd 	bne.w	8005cf8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d132      	bne.n	8005bcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	0cdb      	lsrs	r3, r3, #19
 8005bc6:	04db      	lsls	r3, r3, #19
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	e04e      	b.n	8005c6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	0cdb      	lsrs	r3, r3, #19
 8005be8:	04db      	lsls	r3, r3, #19
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5a:	6939      	ldr	r1, [r7, #16]
 8005c5c:	0148      	lsls	r0, r1, #5
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	4401      	add	r1, r0
 8005c62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d11e      	bne.n	8005cae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e092      	b.n	8005dd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d07e      	beq.n	8005dd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	634b      	str	r3, [r1, #52]	; 0x34
 8005cf6:	e06d      	b.n	8005dd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d12:	0cdb      	lsrs	r3, r3, #19
 8005d14:	04db      	lsls	r3, r3, #19
 8005d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d82:	6939      	ldr	r1, [r7, #16]
 8005d84:	0148      	lsls	r0, r1, #5
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	4401      	add	r1, r0
 8005d8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d10d      	bne.n	8005db4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	460a      	mov	r2, r1
 8005db2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b089      	sub	sp, #36	; 0x24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	4611      	mov	r1, r2
 8005dee:	461a      	mov	r2, r3
 8005df0:	460b      	mov	r3, r1
 8005df2:	71fb      	strb	r3, [r7, #7]
 8005df4:	4613      	mov	r3, r2
 8005df6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11a      	bne.n	8005e3e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e08:	88bb      	ldrh	r3, [r7, #4]
 8005e0a:	3303      	adds	r3, #3
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e10:	2300      	movs	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	e00f      	b.n	8005e36 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	031a      	lsls	r2, r3, #12
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e22:	461a      	mov	r2, r3
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3eb      	bcc.n	8005e16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3724      	adds	r7, #36	; 0x24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b089      	sub	sp, #36	; 0x24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	3303      	adds	r3, #3
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	e00b      	b.n	8005e88 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d3ef      	bcc.n	8005e70 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e90:	69fb      	ldr	r3, [r7, #28]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d12c      	bne.n	8005f14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db12      	blt.n	8005ef2 <USB_EPSetStall+0x54>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e02b      	b.n	8005f6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	db12      	blt.n	8005f4c <USB_EPSetStall+0xae>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d128      	bne.n	8005fe8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	78db      	ldrb	r3, [r3, #3]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d003      	beq.n	8005fc6 <USB_EPClearStall+0x4c>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	78db      	ldrb	r3, [r3, #3]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d138      	bne.n	8006038 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e027      	b.n	8006038 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006006:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	78db      	ldrb	r3, [r3, #3]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d003      	beq.n	8006018 <USB_EPClearStall+0x9e>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d10f      	bne.n	8006038 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006036:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006064:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006068:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006080:	4313      	orrs	r3, r2
 8006082:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ac:	f023 0302 	bic.w	r3, r3, #2
 80060b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80060b2:	2003      	movs	r0, #3
 80060b4:	f7fb fe00 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80060e2:	2003      	movs	r0, #3
 80060e4:	f7fb fde8 	bl	8001cb8 <HAL_Delay>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	0c1b      	lsrs	r3, r3, #16
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	b29b      	uxth	r3, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ae:	68bb      	ldr	r3, [r7, #8]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	01db      	lsls	r3, r3, #7
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800620a:	68bb      	ldr	r3, [r7, #8]
}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f003 0301 	and.w	r3, r3, #1
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006252:	f023 0307 	bic.w	r3, r3, #7
 8006256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	460b      	mov	r3, r1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	333c      	adds	r3, #60	; 0x3c
 8006292:	3304      	adds	r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4a26      	ldr	r2, [pc, #152]	; (8006334 <USB_EP0_OutStart+0xb8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d90a      	bls.n	80062b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b0:	d101      	bne.n	80062b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e037      	b.n	8006326 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e4:	f043 0318 	orr.w	r3, r3, #24
 80062e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d10f      	bne.n	8006324 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	4f54300a 	.word	0x4f54300a

08006338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <USB_CoreReset+0x64>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e01b      	b.n	800638e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	daf2      	bge.n	8006344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <USB_CoreReset+0x64>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d0f0      	beq.n	800636e <USB_CoreReset+0x36>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	00030d40 	.word	0x00030d40

080063a0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80063ac:	2054      	movs	r0, #84	; 0x54
 80063ae:	f002 f81d 	bl	80083ec <malloc>
 80063b2:	4603      	mov	r3, r0
 80063b4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063c4:	2302      	movs	r3, #2
 80063c6:	e039      	b.n	800643c <USBD_CUSTOM_HID_Init+0x9c>
  }

  pdev->pClassData = (void *)hhid;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7c1b      	ldrb	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2205      	movs	r2, #5
 80063dc:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2205      	movs	r2, #5
 80063e2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80063e6:	e006      	b.n	80063f6 <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	2203      	movs	r2, #3
 80063fa:	2181      	movs	r1, #129	; 0x81
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fe8e 	bl	800811e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	2203      	movs	r2, #3
 800640c:	2101      	movs	r1, #1
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 fe85 	bl	800811e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	2101      	movs	r1, #1
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 ff61 	bl	80082fc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006450:	2181      	movs	r1, #129	; 0x81
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fe89 	bl	800816a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006464:	2101      	movs	r1, #1
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fe7f 	bl	800816a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006496:	4618      	mov	r0, r3
 8006498:	f001 ffb0 	bl	80083fc <free>
    pdev->pClassData = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c0:	61bb      	str	r3, [r7, #24]
  USBD_CUSTOM_HID_ItfTypeDef *fops_hid_p;
  uint16_t len = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t  *pbuf = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]
  uint16_t status_info = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	827b      	strh	r3, [r7, #18]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	77fb      	strb	r3, [r7, #31]
  uint8_t* get_feature_return_buf;
  report_id = LOBYTE(req->wValue);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	885b      	ldrh	r3, [r3, #2]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	4b8b      	ldr	r3, [pc, #556]	; (8006708 <USBD_CUSTOM_HID_Setup+0x258>)
 80064da:	701a      	strb	r2, [r3, #0]
  report_type = HIBYTE(req->wValue);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	0a1b      	lsrs	r3, r3, #8
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <USBD_CUSTOM_HID_Setup+0x25c>)
 80064e8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d06e      	beq.n	80065d4 <USBD_CUSTOM_HID_Setup+0x124>
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	f040 80f9 	bne.w	80066ee <USBD_CUSTOM_HID_Setup+0x23e>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	3b01      	subs	r3, #1
 8006502:	2b0a      	cmp	r3, #10
 8006504:	d85e      	bhi.n	80065c4 <USBD_CUSTOM_HID_Setup+0x114>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <USBD_CUSTOM_HID_Setup+0x5c>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	0800658f 	.word	0x0800658f
 8006510:	08006569 	.word	0x08006569
 8006514:	08006547 	.word	0x08006547
 8006518:	080065c5 	.word	0x080065c5
 800651c:	080065c5 	.word	0x080065c5
 8006520:	080065c5 	.word	0x080065c5
 8006524:	080065c5 	.word	0x080065c5
 8006528:	080065c5 	.word	0x080065c5
 800652c:	08006579 	.word	0x08006579
 8006530:	08006557 	.word	0x08006557
 8006534:	08006539 	.word	0x08006539
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	885b      	ldrh	r3, [r3, #2]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006544:	e045      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	3340      	adds	r3, #64	; 0x40
 800654a:	2201      	movs	r2, #1
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fa4d 	bl	80079ee <USBD_CtlSendData>
      break;
 8006554:	e03d      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	b29b      	uxth	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8006566:	e034      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3344      	adds	r3, #68	; 0x44
 800656c:	2201      	movs	r2, #1
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fa3c 	bl	80079ee <USBD_CtlSendData>
      break;
 8006576:	e02c      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2201      	movs	r2, #1
 800657c:	64da      	str	r2, [r3, #76]	; 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	88db      	ldrh	r3, [r3, #6]
 8006584:	461a      	mov	r2, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fa5d 	bl	8007a46 <USBD_CtlPrepareRx>
      break;
 800658c:	e021      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    case CUSTOM_HID_REQ_GET_REPORT:
    	get_feature_return_buf = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
    	fops_hid_p->GetEvent(req,&get_feature_return_buf);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f107 020c 	add.w	r2, r7, #12
 800659a:	4611      	mov	r1, r2
 800659c:	6838      	ldr	r0, [r7, #0]
 800659e:	4798      	blx	r3
    	if(get_feature_return_buf == 0){
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d105      	bne.n	80065b2 <USBD_CUSTOM_HID_Setup+0x102>
    	    		USBD_CtlError (pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f9af 	bl	800790c <USBD_CtlError>
    			    return USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e0a5      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x24e>
    	    	}else{
    	    		USBD_CtlSendData (pdev, get_feature_return_buf, (uint8_t)(req->wLength));
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fa16 	bl	80079ee <USBD_CtlSendData>
    	    	}

    		break;
 80065c2:	e006      	b.n	80065d2 <USBD_CUSTOM_HID_Setup+0x122>

    default:
      USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f9a0 	bl	800790c <USBD_CtlError>
      ret = USBD_FAIL;
 80065cc:	2303      	movs	r3, #3
 80065ce:	77fb      	strb	r3, [r7, #31]
      break;
 80065d0:	bf00      	nop
    }
    break;
 80065d2:	e093      	b.n	80066fc <USBD_CUSTOM_HID_Setup+0x24c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d87f      	bhi.n	80066dc <USBD_CUSTOM_HID_Setup+0x22c>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <USBD_CUSTOM_HID_Setup+0x134>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006615 	.word	0x08006615
 80065e8:	080066eb 	.word	0x080066eb
 80065ec:	080066dd 	.word	0x080066dd
 80065f0:	080066dd 	.word	0x080066dd
 80065f4:	080066dd 	.word	0x080066dd
 80065f8:	080066dd 	.word	0x080066dd
 80065fc:	0800663d 	.word	0x0800663d
 8006600:	080066dd 	.word	0x080066dd
 8006604:	080066dd 	.word	0x080066dd
 8006608:	080066dd 	.word	0x080066dd
 800660c:	0800668f 	.word	0x0800668f
 8006610:	080066b7 	.word	0x080066b7
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	2b03      	cmp	r3, #3
 800661c:	d107      	bne.n	800662e <USBD_CUSTOM_HID_Setup+0x17e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800661e:	f107 0312 	add.w	r3, r7, #18
 8006622:	2202      	movs	r2, #2
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 f9e1 	bl	80079ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800662c:	e05e      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>
        USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f96b 	bl	800790c <USBD_CtlError>
        ret = USBD_FAIL;
 8006636:	2303      	movs	r3, #3
 8006638:	77fb      	strb	r3, [r7, #31]
      break;
 800663a:	e057      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	885b      	ldrh	r3, [r3, #2]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b22      	cmp	r3, #34	; 0x22
 8006646:	d10d      	bne.n	8006664 <USBD_CUSTOM_HID_Setup+0x1b4>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	f240 5203 	movw	r2, #1283	; 0x503
 8006650:	4293      	cmp	r3, r2
 8006652:	bf28      	it	cs
 8006654:	4613      	movcs	r3, r2
 8006656:	84fb      	strh	r3, [r7, #38]	; 0x26
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	e00d      	b.n	8006680 <USBD_CUSTOM_HID_Setup+0x1d0>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	0a1b      	lsrs	r3, r3, #8
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b21      	cmp	r3, #33	; 0x21
 800666e:	d107      	bne.n	8006680 <USBD_CUSTOM_HID_Setup+0x1d0>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8006670:	4b27      	ldr	r3, [pc, #156]	; (8006710 <USBD_CUSTOM_HID_Setup+0x260>)
 8006672:	623b      	str	r3, [r7, #32]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	2b09      	cmp	r3, #9
 800667a:	bf28      	it	cs
 800667c:	2309      	movcs	r3, #9
 800667e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006682:	461a      	mov	r2, r3
 8006684:	6a39      	ldr	r1, [r7, #32]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 f9b1 	bl	80079ee <USBD_CtlSendData>
      break;
 800668c:	e02e      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006694:	2b03      	cmp	r3, #3
 8006696:	d107      	bne.n	80066a8 <USBD_CUSTOM_HID_Setup+0x1f8>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	3348      	adds	r3, #72	; 0x48
 800669c:	2201      	movs	r2, #1
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 f9a4 	bl	80079ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066a6:	e021      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>
        USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 f92e 	bl	800790c <USBD_CtlError>
        ret = USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	77fb      	strb	r3, [r7, #31]
      break;
 80066b4:	e01a      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d106      	bne.n	80066ce <USBD_CUSTOM_HID_Setup+0x21e>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	885b      	ldrh	r3, [r3, #2]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066cc:	e00e      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>
        USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 f91b 	bl	800790c <USBD_CtlError>
        ret = USBD_FAIL;
 80066d6:	2303      	movs	r3, #3
 80066d8:	77fb      	strb	r3, [r7, #31]
      break;
 80066da:	e007      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f914 	bl	800790c <USBD_CtlError>
      ret = USBD_FAIL;
 80066e4:	2303      	movs	r3, #3
 80066e6:	77fb      	strb	r3, [r7, #31]
      break;
 80066e8:	e000      	b.n	80066ec <USBD_CUSTOM_HID_Setup+0x23c>
      break;
 80066ea:	bf00      	nop
    }
    break;
 80066ec:	e006      	b.n	80066fc <USBD_CUSTOM_HID_Setup+0x24c>

  default:
    USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f90b 	bl	800790c <USBD_CtlError>
    ret = USBD_FAIL;
 80066f6:	2303      	movs	r3, #3
 80066f8:	77fb      	strb	r3, [r7, #31]
    break;
 80066fa:	bf00      	nop
  }
  return (uint8_t)ret;
 80066fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3728      	adds	r7, #40	; 0x28
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000ae4 	.word	0x20000ae4
 800670c:	20000ae5 	.word	0x20000ae5
 8006710:	200000d4 	.word	0x200000d4

08006714 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	e01b      	b.n	8006768 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006736:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673e:	2b03      	cmp	r3, #3
 8006740:	d111      	bne.n	8006766 <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	2181      	movs	r1, #129	; 0x81
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f001 fdad 	bl	80082ba <USBD_LL_Transmit>
 8006760:	e001      	b.n	8006766 <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2229      	movs	r2, #41	; 0x29
 800677c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800677e:	4b03      	ldr	r3, [pc, #12]	; (800678c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	20000050 	.word	0x20000050

08006790 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2229      	movs	r2, #41	; 0x29
 800679c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800679e:	4b03      	ldr	r3, [pc, #12]	; (80067ac <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	2000007c 	.word	0x2000007c

080067b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2229      	movs	r2, #41	; 0x29
 80067bc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80067be:	4b03      	ldr	r3, [pc, #12]	; (80067cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	200000a8 	.word	0x200000a8

080067d0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	e00b      	b.n	8006828 <USBD_CUSTOM_HID_DataOut+0x32>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006816:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4610      	mov	r0, r2
 8006824:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8006842:	2303      	movs	r3, #3
 8006844:	e00a      	b.n	800685c <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	2101      	movs	r1, #1
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fd51 	bl	80082fc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006872:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d109      	bne.n	8006890 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent((uint8_t*)&hhid->Report_buf);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4610      	mov	r0, r2
 8006888:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	220a      	movs	r2, #10
 80068a8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	200000e0 	.word	0x200000e0

080068bc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e004      	b.n	80068da <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	4613      	mov	r3, r2
 80068f2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e025      	b.n	800694a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	79fa      	ldrb	r2, [r7, #7]
 800693c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 fb86 	bl	8008050 <USBD_LL_Init>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006966:	2303      	movs	r3, #3
 8006968:	e010      	b.n	800698c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f107 020e 	add.w	r2, r7, #14
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fba3 	bl	80080e8 <USBD_LL_Start>
 80069a2:	4603      	mov	r3, r0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069ce:	2303      	movs	r3, #3
 80069d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	4611      	mov	r1, r2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 ff2b 	bl	8007898 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d00e      	beq.n	8006a84 <USBD_LL_SetupStage+0x5a>
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d302      	bcc.n	8006a70 <USBD_LL_SetupStage+0x46>
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d014      	beq.n	8006a98 <USBD_LL_SetupStage+0x6e>
 8006a6e:	e01d      	b.n	8006aac <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa17 	bl	8006eac <USBD_StdDevReq>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	73fb      	strb	r3, [r7, #15]
      break;
 8006a82:	e020      	b.n	8006ac6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa7b 	bl	8006f88 <USBD_StdItfReq>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
      break;
 8006a96:	e016      	b.n	8006ac6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fab7 	bl	8007014 <USBD_StdEPReq>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	e00c      	b.n	8006ac6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fb74 	bl	80081a8 <USBD_LL_StallEP>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac4:	bf00      	nop
  }

  return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d137      	bne.n	8006b54 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d14a      	bne.n	8006b8c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d913      	bls.n	8006b2a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	1ad2      	subs	r2, r2, r3
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	bf28      	it	cs
 8006b1c:	4613      	movcs	r3, r2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 ffac 	bl	8007a80 <USBD_CtlContinueRx>
 8006b28:	e030      	b.n	8006b8c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d105      	bne.n	8006b4c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 ffa8 	bl	8007aa2 <USBD_CtlSendStatus>
 8006b52:	e01b      	b.n	8006b8c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d10e      	bne.n	8006b88 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	7afa      	ldrb	r2, [r7, #11]
 8006b74:	4611      	mov	r1, r2
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	4798      	blx	r3
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	e002      	b.n	8006b8e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e000      	b.n	8006b8e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d16a      	bne.n	8006c80 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3314      	adds	r3, #20
 8006bae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d155      	bne.n	8006c66 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d914      	bls.n	8006bf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 ff21 	bl	8007a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be2:	2300      	movs	r3, #0
 8006be4:	2200      	movs	r2, #0
 8006be6:	2100      	movs	r1, #0
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 fb87 	bl	80082fc <USBD_LL_PrepareReceive>
 8006bee:	e03a      	b.n	8006c66 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d11c      	bne.n	8006c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d316      	bcc.n	8006c36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d20f      	bcs.n	8006c36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 ff02 	bl	8007a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 fb64 	bl	80082fc <USBD_LL_PrepareReceive>
 8006c34:	e017      	b.n	8006c66 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d105      	bne.n	8006c58 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 faa4 	bl	80081a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 ff31 	bl	8007ac8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d123      	bne.n	8006cb8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fe9b 	bl	80069ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c7e:	e01b      	b.n	8006cb8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d013      	beq.n	8006cb4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d10e      	bne.n	8006cb4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	7afa      	ldrb	r2, [r7, #11]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	4798      	blx	r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	e002      	b.n	8006cba <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e000      	b.n	8006cba <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6852      	ldr	r2, [r2, #4]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	4611      	mov	r1, r2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fa06 	bl	800811e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	2200      	movs	r2, #0
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 f9f8 	bl	800811e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d105      	bne.n	8006dac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d10b      	bne.n	8006de4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6852      	ldr	r2, [r2, #4]
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	4611      	mov	r1, r2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
  }

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	3301      	adds	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e8e:	8a3b      	ldrh	r3, [r7, #16]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d004      	beq.n	8006ed0 <USBD_StdDevReq+0x24>
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d002      	beq.n	8006ed0 <USBD_StdDevReq+0x24>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <USBD_StdDevReq+0x38>
 8006ece:	e050      	b.n	8006f72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ee2:	e04b      	b.n	8006f7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b09      	cmp	r3, #9
 8006eea:	d83c      	bhi.n	8006f66 <USBD_StdDevReq+0xba>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <USBD_StdDevReq+0x48>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006f5d 	.word	0x08006f5d
 8006efc:	08006f67 	.word	0x08006f67
 8006f00:	08006f53 	.word	0x08006f53
 8006f04:	08006f67 	.word	0x08006f67
 8006f08:	08006f27 	.word	0x08006f27
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f67 	.word	0x08006f67
 8006f14:	08006f3f 	.word	0x08006f3f
 8006f18:	08006f31 	.word	0x08006f31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9ce 	bl	80072c0 <USBD_GetDescriptor>
      break;
 8006f24:	e024      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fb33 	bl	8007594 <USBD_SetAddress>
      break;
 8006f2e:	e01f      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb70 	bl	8007618 <USBD_SetConfig>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e018      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc0d 	bl	8007760 <USBD_GetConfig>
      break;
 8006f46:	e013      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc3c 	bl	80077c8 <USBD_GetStatus>
      break;
 8006f50:	e00e      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc6a 	bl	800782e <USBD_SetFeature>
      break;
 8006f5a:	e009      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fc79 	bl	8007856 <USBD_ClrFeature>
      break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fccf 	bl	800790c <USBD_CtlError>
      break;
 8006f6e:	bf00      	nop
    }
    break;
 8006f70:	e004      	b.n	8006f7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fcc9 	bl	800790c <USBD_CtlError>
    break;
 8006f7a:	bf00      	nop
  }

  return ret;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d003      	beq.n	8006faa <USBD_StdItfReq+0x22>
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d001      	beq.n	8006faa <USBD_StdItfReq+0x22>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d12a      	bne.n	8007000 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d81d      	bhi.n	8006ff2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	889b      	ldrh	r3, [r3, #4]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d813      	bhi.n	8006fe8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	88db      	ldrh	r3, [r3, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d110      	bne.n	8006ffc <USBD_StdItfReq+0x74>
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10d      	bne.n	8006ffc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fd5e 	bl	8007aa2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006fe6:	e009      	b.n	8006ffc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc8e 	bl	800790c <USBD_CtlError>
      break;
 8006ff0:	e004      	b.n	8006ffc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fc89 	bl	800790c <USBD_CtlError>
      break;
 8006ffa:	e000      	b.n	8006ffe <USBD_StdItfReq+0x76>
      break;
 8006ffc:	bf00      	nop
    }
    break;
 8006ffe:	e004      	b.n	800700a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fc82 	bl	800790c <USBD_CtlError>
    break;
 8007008:	bf00      	nop
  }

  return ret;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	889b      	ldrh	r3, [r3, #4]
 8007026:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007030:	2b20      	cmp	r3, #32
 8007032:	d004      	beq.n	800703e <USBD_StdEPReq+0x2a>
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d002      	beq.n	800703e <USBD_StdEPReq+0x2a>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <USBD_StdEPReq+0x3e>
 800703c:	e135      	b.n	80072aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
    break;
 8007050:	e130      	b.n	80072b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d03e      	beq.n	80070d8 <USBD_StdEPReq+0xc4>
 800705a:	2b03      	cmp	r3, #3
 800705c:	d002      	beq.n	8007064 <USBD_StdEPReq+0x50>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d077      	beq.n	8007152 <USBD_StdEPReq+0x13e>
 8007062:	e11c      	b.n	800729e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706a:	2b02      	cmp	r3, #2
 800706c:	d002      	beq.n	8007074 <USBD_StdEPReq+0x60>
 800706e:	2b03      	cmp	r3, #3
 8007070:	d015      	beq.n	800709e <USBD_StdEPReq+0x8a>
 8007072:	e02b      	b.n	80070cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <USBD_StdEPReq+0x80>
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b80      	cmp	r3, #128	; 0x80
 800707e:	d009      	beq.n	8007094 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f88f 	bl	80081a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f88b 	bl	80081a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007092:	e020      	b.n	80070d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc38 	bl	800790c <USBD_CtlError>
        break;
 800709c:	e01b      	b.n	80070d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	885b      	ldrh	r3, [r3, #2]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10e      	bne.n	80070c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <USBD_StdEPReq+0xb0>
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d008      	beq.n	80070c4 <USBD_StdEPReq+0xb0>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 f872 	bl	80081a8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fcec 	bl	8007aa2 <USBD_CtlSendStatus>

        break;
 80070ca:	e004      	b.n	80070d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc1c 	bl	800790c <USBD_CtlError>
        break;
 80070d4:	bf00      	nop
      }
      break;
 80070d6:	e0e7      	b.n	80072a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d002      	beq.n	80070e8 <USBD_StdEPReq+0xd4>
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d015      	beq.n	8007112 <USBD_StdEPReq+0xfe>
 80070e6:	e02d      	b.n	8007144 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <USBD_StdEPReq+0xf4>
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b80      	cmp	r3, #128	; 0x80
 80070f2:	d009      	beq.n	8007108 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f855 	bl	80081a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f851 	bl	80081a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007106:	e023      	b.n	8007150 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fbfe 	bl	800790c <USBD_CtlError>
        break;
 8007110:	e01e      	b.n	8007150 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d119      	bne.n	800714e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f85c 	bl	80081e6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fcb7 	bl	8007aa2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
        }
        break;
 8007142:	e004      	b.n	800714e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fbe0 	bl	800790c <USBD_CtlError>
        break;
 800714c:	e000      	b.n	8007150 <USBD_StdEPReq+0x13c>
        break;
 800714e:	bf00      	nop
      }
      break;
 8007150:	e0aa      	b.n	80072a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	2b02      	cmp	r3, #2
 800715a:	d002      	beq.n	8007162 <USBD_StdEPReq+0x14e>
 800715c:	2b03      	cmp	r3, #3
 800715e:	d032      	beq.n	80071c6 <USBD_StdEPReq+0x1b2>
 8007160:	e097      	b.n	8007292 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <USBD_StdEPReq+0x164>
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b80      	cmp	r3, #128	; 0x80
 800716c:	d004      	beq.n	8007178 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fbcb 	bl	800790c <USBD_CtlError>
          break;
 8007176:	e091      	b.n	800729c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	da0b      	bge.n	8007198 <USBD_StdEPReq+0x184>
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	3310      	adds	r3, #16
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	3304      	adds	r3, #4
 8007196:	e00b      	b.n	80071b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	3304      	adds	r3, #4
 80071b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2202      	movs	r2, #2
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fc15 	bl	80079ee <USBD_CtlSendData>
        break;
 80071c4:	e06a      	b.n	800729c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80071c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da11      	bge.n	80071f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	f003 020f 	and.w	r2, r3, #15
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	3324      	adds	r3, #36	; 0x24
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d117      	bne.n	8007218 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb8e 	bl	800790c <USBD_CtlError>
            break;
 80071f0:	e054      	b.n	800729c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb7b 	bl	800790c <USBD_CtlError>
            break;
 8007216:	e041      	b.n	800729c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da0b      	bge.n	8007238 <USBD_StdEPReq+0x224>
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	3310      	adds	r3, #16
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	4413      	add	r3, r2
 8007234:	3304      	adds	r3, #4
 8007236:	e00b      	b.n	8007250 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	3304      	adds	r3, #4
 8007250:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <USBD_StdEPReq+0x24a>
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d103      	bne.n	8007266 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e00e      	b.n	8007284 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 ffda 	bl	8008224 <USBD_LL_IsStallEP>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e002      	b.n	8007284 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2202      	movs	r2, #2
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fbaf 	bl	80079ee <USBD_CtlSendData>
          break;
 8007290:	e004      	b.n	800729c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fb39 	bl	800790c <USBD_CtlError>
        break;
 800729a:	bf00      	nop
      }
      break;
 800729c:	e004      	b.n	80072a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb33 	bl	800790c <USBD_CtlError>
      break;
 80072a6:	bf00      	nop
    }
    break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fb2d 	bl	800790c <USBD_CtlError>
    break;
 80072b2:	bf00      	nop
  }

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	f200 8128 	bhi.w	8007536 <USBD_GetDescriptor+0x276>
 80072e6:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <USBD_GetDescriptor+0x2c>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007321 	.word	0x08007321
 80072f4:	08007361 	.word	0x08007361
 80072f8:	08007537 	.word	0x08007537
 80072fc:	08007537 	.word	0x08007537
 8007300:	080074d7 	.word	0x080074d7
 8007304:	08007503 	.word	0x08007503
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
    break;
 800731e:	e112      	b.n	8007546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	7c1b      	ldrb	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f107 0208 	add.w	r2, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	2202      	movs	r2, #2
 8007340:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007342:	e100      	b.n	8007546 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	f107 0208 	add.w	r2, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	2202      	movs	r2, #2
 800735c:	701a      	strb	r2, [r3, #0]
    break;
 800735e:	e0f2      	b.n	8007546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	885b      	ldrh	r3, [r3, #2]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b05      	cmp	r3, #5
 8007368:	f200 80ac 	bhi.w	80074c4 <USBD_GetDescriptor+0x204>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USBD_GetDescriptor+0xb4>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	0800738d 	.word	0x0800738d
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073f5 	.word	0x080073f5
 8007380:	08007429 	.word	0x08007429
 8007384:	0800745d 	.word	0x0800745d
 8007388:	08007491 	.word	0x08007491
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	7c12      	ldrb	r2, [r2, #16]
 80073a4:	f107 0108 	add.w	r1, r7, #8
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
 80073ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073ae:	e091      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 faaa 	bl	800790c <USBD_CtlError>
        err++;
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	3301      	adds	r3, #1
 80073bc:	72fb      	strb	r3, [r7, #11]
      break;
 80073be:	e089      	b.n	80074d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	7c12      	ldrb	r2, [r2, #16]
 80073d8:	f107 0108 	add.w	r1, r7, #8
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
 80073e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e2:	e077      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa90 	bl	800790c <USBD_CtlError>
        err++;
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	3301      	adds	r3, #1
 80073f0:	72fb      	strb	r3, [r7, #11]
      break;
 80073f2:	e06f      	b.n	80074d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	7c12      	ldrb	r2, [r2, #16]
 800740c:	f107 0108 	add.w	r1, r7, #8
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
 8007414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007416:	e05d      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa76 	bl	800790c <USBD_CtlError>
        err++;
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	3301      	adds	r3, #1
 8007424:	72fb      	strb	r3, [r7, #11]
      break;
 8007426:	e055      	b.n	80074d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	7c12      	ldrb	r2, [r2, #16]
 8007440:	f107 0108 	add.w	r1, r7, #8
 8007444:	4610      	mov	r0, r2
 8007446:	4798      	blx	r3
 8007448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800744a:	e043      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa5c 	bl	800790c <USBD_CtlError>
        err++;
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	3301      	adds	r3, #1
 8007458:	72fb      	strb	r3, [r7, #11]
      break;
 800745a:	e03b      	b.n	80074d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	7c12      	ldrb	r2, [r2, #16]
 8007474:	f107 0108 	add.w	r1, r7, #8
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
 800747c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800747e:	e029      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa42 	bl	800790c <USBD_CtlError>
        err++;
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	3301      	adds	r3, #1
 800748c:	72fb      	strb	r3, [r7, #11]
      break;
 800748e:	e021      	b.n	80074d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	7c12      	ldrb	r2, [r2, #16]
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074b2:	e00f      	b.n	80074d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa28 	bl	800790c <USBD_CtlError>
        err++;
 80074bc:	7afb      	ldrb	r3, [r7, #11]
 80074be:	3301      	adds	r3, #1
 80074c0:	72fb      	strb	r3, [r7, #11]
      break;
 80074c2:	e007      	b.n	80074d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa20 	bl	800790c <USBD_CtlError>
      err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80074d2:	bf00      	nop
    }
    break;
 80074d4:	e037      	b.n	8007546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7c1b      	ldrb	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	f107 0208 	add.w	r2, r7, #8
 80074ea:	4610      	mov	r0, r2
 80074ec:	4798      	blx	r3
 80074ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80074f0:	e029      	b.n	8007546 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa09 	bl	800790c <USBD_CtlError>
      err++;
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	3301      	adds	r3, #1
 80074fe:	72fb      	strb	r3, [r7, #11]
    break;
 8007500:	e021      	b.n	8007546 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7c1b      	ldrb	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f107 0208 	add.w	r2, r7, #8
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
 800751a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	2207      	movs	r2, #7
 8007522:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007524:	e00f      	b.n	8007546 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9ef 	bl	800790c <USBD_CtlError>
      err++;
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	3301      	adds	r3, #1
 8007532:	72fb      	strb	r3, [r7, #11]
    break;
 8007534:	e007      	b.n	8007546 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f9e7 	bl	800790c <USBD_CtlError>
    err++;
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	3301      	adds	r3, #1
 8007542:	72fb      	strb	r3, [r7, #11]
    break;
 8007544:	bf00      	nop
  }

  if (err != 0U)
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11e      	bne.n	800758a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	88db      	ldrh	r3, [r3, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d016      	beq.n	8007582 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007554:	893b      	ldrh	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	88da      	ldrh	r2, [r3, #6]
 800755e:	893b      	ldrh	r3, [r7, #8]
 8007560:	4293      	cmp	r3, r2
 8007562:	bf28      	it	cs
 8007564:	4613      	movcs	r3, r2
 8007566:	b29b      	uxth	r3, r3
 8007568:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	461a      	mov	r2, r3
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa3c 	bl	80079ee <USBD_CtlSendData>
 8007576:	e009      	b.n	800758c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9c6 	bl	800790c <USBD_CtlError>
 8007580:	e004      	b.n	800758c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa8d 	bl	8007aa2 <USBD_CtlSendStatus>
 8007588:	e000      	b.n	800758c <USBD_GetDescriptor+0x2cc>
    return;
 800758a:	bf00      	nop
    }
  }
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d130      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d12c      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	2b7f      	cmp	r3, #127	; 0x7f
 80075b4:	d828      	bhi.n	8007608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d104      	bne.n	80075d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f99c 	bl	800790c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	e01c      	b.n	8007610 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fe4a 	bl	800827c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa5a 	bl	8007aa2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	e008      	b.n	8007610 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	e003      	b.n	8007610 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f97e 	bl	800790c <USBD_CtlError>
  }
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b4b      	ldr	r3, [pc, #300]	; (800775c <USBD_SetConfig+0x144>)
 800762e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007630:	4b4a      	ldr	r3, [pc, #296]	; (800775c <USBD_SetConfig+0x144>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d905      	bls.n	8007644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f966 	bl	800790c <USBD_CtlError>
    return USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	e087      	b.n	8007754 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_SetConfig+0x3c>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d025      	beq.n	800769e <USBD_SetConfig+0x86>
 8007652:	e071      	b.n	8007738 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007654:	4b41      	ldr	r3, [pc, #260]	; (800775c <USBD_SetConfig+0x144>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01c      	beq.n	8007696 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800765c:	4b3f      	ldr	r3, [pc, #252]	; (800775c <USBD_SetConfig+0x144>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007666:	4b3d      	ldr	r3, [pc, #244]	; (800775c <USBD_SetConfig+0x144>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff f9a8 	bl	80069c2 <USBD_SetClassConfig>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f944 	bl	800790c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007684:	e065      	b.n	8007752 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa0b 	bl	8007aa2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2203      	movs	r2, #3
 8007690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007694:	e05d      	b.n	8007752 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa03 	bl	8007aa2 <USBD_CtlSendStatus>
    break;
 800769c:	e059      	b.n	8007752 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800769e:	4b2f      	ldr	r3, [pc, #188]	; (800775c <USBD_SetConfig+0x144>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d112      	bne.n	80076cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2202      	movs	r2, #2
 80076aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80076ae:	4b2b      	ldr	r3, [pc, #172]	; (800775c <USBD_SetConfig+0x144>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <USBD_SetConfig+0x144>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff f99b 	bl	80069fa <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9ec 	bl	8007aa2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80076ca:	e042      	b.n	8007752 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80076cc:	4b23      	ldr	r3, [pc, #140]	; (800775c <USBD_SetConfig+0x144>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d02a      	beq.n	8007730 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff f989 	bl	80069fa <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80076e8:	4b1c      	ldr	r3, [pc, #112]	; (800775c <USBD_SetConfig+0x144>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <USBD_SetConfig+0x144>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff f962 	bl	80069c2 <USBD_SetClassConfig>
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00f      	beq.n	8007728 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8fe 	bl	800790c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff f96e 	bl	80069fa <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007726:	e014      	b.n	8007752 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9ba 	bl	8007aa2 <USBD_CtlSendStatus>
    break;
 800772e:	e010      	b.n	8007752 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f9b6 	bl	8007aa2 <USBD_CtlSendStatus>
    break;
 8007736:	e00c      	b.n	8007752 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8e6 	bl	800790c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <USBD_SetConfig+0x144>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff f957 	bl	80069fa <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
    break;
 8007750:	bf00      	nop
  }

  return ret;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000af0 	.word	0x20000af0

08007760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	88db      	ldrh	r3, [r3, #6]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d004      	beq.n	800777c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8c9 	bl	800790c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800777a:	e021      	b.n	80077c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	2b01      	cmp	r3, #1
 8007784:	db17      	blt.n	80077b6 <USBD_GetConfig+0x56>
 8007786:	2b02      	cmp	r3, #2
 8007788:	dd02      	ble.n	8007790 <USBD_GetConfig+0x30>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d00b      	beq.n	80077a6 <USBD_GetConfig+0x46>
 800778e:	e012      	b.n	80077b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3308      	adds	r3, #8
 800779a:	2201      	movs	r2, #1
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f925 	bl	80079ee <USBD_CtlSendData>
      break;
 80077a4:	e00c      	b.n	80077c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3304      	adds	r3, #4
 80077aa:	2201      	movs	r2, #1
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f91d 	bl	80079ee <USBD_CtlSendData>
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f8a7 	bl	800790c <USBD_CtlError>
      break;
 80077be:	bf00      	nop
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	3b01      	subs	r3, #1
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d81e      	bhi.n	800781c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	88db      	ldrh	r3, [r3, #6]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d004      	beq.n	80077f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f88f 	bl	800790c <USBD_CtlError>
      break;
 80077ee:	e01a      	b.n	8007826 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f043 0202 	orr.w	r2, r3, #2
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	330c      	adds	r3, #12
 8007810:	2202      	movs	r2, #2
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f8ea 	bl	80079ee <USBD_CtlSendData>
    break;
 800781a:	e004      	b.n	8007826 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f874 	bl	800790c <USBD_CtlError>
    break;
 8007824:	bf00      	nop
  }
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d106      	bne.n	800784e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f92a 	bl	8007aa2 <USBD_CtlSendStatus>
  }
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	3b01      	subs	r3, #1
 8007868:	2b02      	cmp	r3, #2
 800786a:	d80b      	bhi.n	8007884 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10c      	bne.n	800788e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f910 	bl	8007aa2 <USBD_CtlSendStatus>
      }
      break;
 8007882:	e004      	b.n	800788e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f840 	bl	800790c <USBD_CtlError>
      break;
 800788c:	e000      	b.n	8007890 <USBD_ClrFeature+0x3a>
      break;
 800788e:	bf00      	nop
  }
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff fad4 	bl	8006e70 <SWAPBYTE>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3301      	adds	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7ff fac7 	bl	8006e70 <SWAPBYTE>
 80078e2:	4603      	mov	r3, r0
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff faba 	bl	8006e70 <SWAPBYTE>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	80da      	strh	r2, [r3, #6]
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc45 	bl	80081a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800791e:	2100      	movs	r1, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc41 	bl	80081a8 <USBD_LL_StallEP>
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d036      	beq.n	80079b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007948:	6938      	ldr	r0, [r7, #16]
 800794a:	f000 f836 	bl	80079ba <USBD_GetLen>
 800794e:	4603      	mov	r3, r0
 8007950:	3301      	adds	r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	7812      	ldrb	r2, [r2, #0]
 8007966:	701a      	strb	r2, [r3, #0]
  idx++;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	3301      	adds	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4413      	add	r3, r2
 8007974:	2203      	movs	r2, #3
 8007976:	701a      	strb	r2, [r3, #0]
  idx++;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	3301      	adds	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800797e:	e013      	b.n	80079a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	7812      	ldrb	r2, [r2, #0]
 800798a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	3301      	adds	r3, #1
 8007990:	613b      	str	r3, [r7, #16]
    idx++;
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	3301      	adds	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	3301      	adds	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e7      	bne.n	8007980 <USBD_GetString+0x52>
 80079b0:	e000      	b.n	80079b4 <USBD_GetString+0x86>
    return;
 80079b2:	bf00      	nop
  }
}
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079ca:	e005      	b.n	80079d8 <USBD_GetLen+0x1e>
  {
    len++;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	3301      	adds	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f5      	bne.n	80079cc <USBD_GetLen+0x12>
  }

  return len;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fc50 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fc3f 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2203      	movs	r2, #3
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fc43 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	2100      	movs	r1, #0
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 fc32 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2204      	movs	r2, #4
 8007aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fbfe 	bl	80082ba <USBD_LL_Transmit>

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc0c 	bl	80082fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007af4:	2200      	movs	r2, #0
 8007af6:	4912      	ldr	r1, [pc, #72]	; (8007b40 <MX_USB_DEVICE_Init+0x50>)
 8007af8:	4812      	ldr	r0, [pc, #72]	; (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007afa:	f7fe fef4 	bl	80068e6 <USBD_Init>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b04:	f7f9 fd32 	bl	800156c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007b08:	490f      	ldr	r1, [pc, #60]	; (8007b48 <MX_USB_DEVICE_Init+0x58>)
 8007b0a:	480e      	ldr	r0, [pc, #56]	; (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b0c:	f7fe ff21 	bl	8006952 <USBD_RegisterClass>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b16:	f7f9 fd29 	bl	800156c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007b1a:	490c      	ldr	r1, [pc, #48]	; (8007b4c <MX_USB_DEVICE_Init+0x5c>)
 8007b1c:	4809      	ldr	r0, [pc, #36]	; (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b1e:	f7fe fecd 	bl	80068bc <USBD_CUSTOM_HID_RegisterInterface>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b28:	f7f9 fd20 	bl	800156c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b2c:	4805      	ldr	r0, [pc, #20]	; (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b2e:	f7fe ff31 	bl	8006994 <USBD_Start>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b38:	f7f9 fd18 	bl	800156c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b3c:	bf00      	nop
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20000604 	.word	0x20000604
 8007b44:	20000b00 	.word	0x20000b00
 8007b48:	20000018 	.word	0x20000018
 8007b4c:	200005f0 	.word	0x200005f0

08007b50 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007b64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
extern uint8_t usb_rx_buffer;
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* report)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef *myusb=(USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007b78:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <CUSTOM_HID_OutEvent_FS+0x30>)
 8007b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7e:	60fb      	str	r3, [r7, #12]
	memcpy(usb_rx_buffer, myusb->Report_buf, sizeof(myusb->Report_buf));
 8007b80:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <CUSTOM_HID_OutEvent_FS+0x34>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2240      	movs	r2, #64	; 0x40
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f000 fc3e 	bl	800840c <memcpy>
  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <CUSTOM_HID_OutEvent_FS+0x30>)
 8007b92:	f7fe fe4d 	bl	8006830 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8007b96:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000b00 	.word	0x20000b00
 8007ba4:	20000ae0 	.word	0x20000ae0

08007ba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2212      	movs	r2, #18
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	20000620 	.word	0x20000620

08007bcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000634 	.word	0x20000634

08007bf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c08:	f7ff fe91 	bl	800792e <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c14:	f7ff fe8b 	bl	800792e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000dd0 	.word	0x20000dd0
 8007c28:	080085c4 	.word	0x080085c4

08007c2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4904      	ldr	r1, [pc, #16]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c3c:	4804      	ldr	r0, [pc, #16]	; (8007c50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c3e:	f7ff fe76 	bl	800792e <USBD_GetString>
  return USBD_StrDesc;
 8007c42:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000dd0 	.word	0x20000dd0
 8007c50:	080085dc 	.word	0x080085dc

08007c54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	221a      	movs	r2, #26
 8007c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c66:	f000 f843 	bl	8007cf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c6a:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000638 	.word	0x20000638

08007c78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c90:	f7ff fe4d 	bl	800792e <USBD_GetString>
 8007c94:	e004      	b.n	8007ca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c9c:	f7ff fe47 	bl	800792e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000dd0 	.word	0x20000dd0
 8007cb0:	080085ec 	.word	0x080085ec

08007cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4907      	ldr	r1, [pc, #28]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cca:	4808      	ldr	r0, [pc, #32]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ccc:	f7ff fe2f 	bl	800792e <USBD_GetString>
 8007cd0:	e004      	b.n	8007cdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cd8:	f7ff fe29 	bl	800792e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000dd0 	.word	0x20000dd0
 8007cec:	08008600 	.word	0x08008600

08007cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <Get_SerialNum+0x44>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cfc:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <Get_SerialNum+0x48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <Get_SerialNum+0x4c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d16:	2208      	movs	r2, #8
 8007d18:	4909      	ldr	r1, [pc, #36]	; (8007d40 <Get_SerialNum+0x50>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f814 	bl	8007d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d20:	2204      	movs	r2, #4
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <Get_SerialNum+0x54>)
 8007d24:	68b8      	ldr	r0, [r7, #8]
 8007d26:	f000 f80f 	bl	8007d48 <IntToUnicode>
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	1fff7a10 	.word	0x1fff7a10
 8007d38:	1fff7a14 	.word	0x1fff7a14
 8007d3c:	1fff7a18 	.word	0x1fff7a18
 8007d40:	2000063a 	.word	0x2000063a
 8007d44:	2000064a 	.word	0x2000064a

08007d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e027      	b.n	8007db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d80b      	bhi.n	8007d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	0f1b      	lsrs	r3, r3, #28
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4619      	mov	r1, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	440b      	add	r3, r1
 8007d78:	3230      	adds	r2, #48	; 0x30
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e00a      	b.n	8007d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	0f1b      	lsrs	r3, r3, #28
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	440b      	add	r3, r1
 8007d90:	3237      	adds	r2, #55	; 0x37
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	3301      	adds	r3, #1
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	7dfa      	ldrb	r2, [r7, #23]
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d3d3      	bcc.n	8007d60 <IntToUnicode+0x18>
  }
}
 8007db8:	bf00      	nop
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de4:	d13a      	bne.n	8007e5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	6313      	str	r3, [r2, #48]	; 0x30
 8007df6:	4b1b      	ldr	r3, [pc, #108]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e10:	2303      	movs	r3, #3
 8007e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e14:	230a      	movs	r3, #10
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4812      	ldr	r0, [pc, #72]	; (8007e68 <HAL_PCD_MspInit+0xa4>)
 8007e20:	f7fa f87e 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e28:	4a0e      	ldr	r2, [pc, #56]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	6353      	str	r3, [r2, #52]	; 0x34
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e38:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <HAL_PCD_MspInit+0xa0>)
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	2043      	movs	r0, #67	; 0x43
 8007e52:	f7fa f82e 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e56:	2043      	movs	r0, #67	; 0x43
 8007e58:	f7fa f847 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	40023800 	.word	0x40023800
 8007e68:	40020000 	.word	0x40020000

08007e6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe fdd1 	bl	8006a2a <USBD_LL_SetupStage>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7fe fe09 	bl	8006ad0 <USBD_LL_DataOutStage>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	4613      	mov	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	3348      	adds	r3, #72	; 0x48
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7fe fe52 	bl	8006b96 <USBD_LL_DataInStage>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe ff56 	bl	8006dba <USBD_LL_SOF>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	e008      	b.n	8007f42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d102      	bne.n	8007f3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	e001      	b.n	8007f42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f3e:	f7f9 fb15 	bl	800156c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fef9 	bl	8006d44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe feb2 	bl	8006cc2 <USBD_LL_Reset>
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fef4 	bl	8006d64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f8e:	f043 0301 	orr.w	r3, r3, #1
 8007f92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <HAL_PCD_SuspendCallback+0x48>)
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4a03      	ldr	r2, [pc, #12]	; (8007fb0 <HAL_PCD_SuspendCallback+0x48>)
 8007fa2:	f043 0306 	orr.w	r3, r3, #6
 8007fa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed00 	.word	0xe000ed00

08007fb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fee3 	bl	8006d8e <USBD_LL_Resume>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe ff0e 	bl	8006e08 <USBD_LL_IsoOUTIncomplete>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe feef 	bl	8006dee <USBD_LL_IsoINIncomplete>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fefb 	bl	8006e22 <USBD_LL_DevConnected>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fef8 	bl	8006e38 <USBD_LL_DevDisconnected>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d13c      	bne.n	80080da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008060:	4a20      	ldr	r2, [pc, #128]	; (80080e4 <USBD_LL_Init+0x94>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1e      	ldr	r2, [pc, #120]	; (80080e4 <USBD_LL_Init+0x94>)
 800806c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <USBD_LL_Init+0x94>)
 8008072:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <USBD_LL_Init+0x94>)
 800807a:	2204      	movs	r2, #4
 800807c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800807e:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <USBD_LL_Init+0x94>)
 8008080:	2202      	movs	r2, #2
 8008082:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <USBD_LL_Init+0x94>)
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800808a:	4b16      	ldr	r3, [pc, #88]	; (80080e4 <USBD_LL_Init+0x94>)
 800808c:	2202      	movs	r2, #2
 800808e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <USBD_LL_Init+0x94>)
 8008092:	2200      	movs	r2, #0
 8008094:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008096:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <USBD_LL_Init+0x94>)
 8008098:	2200      	movs	r2, #0
 800809a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <USBD_LL_Init+0x94>)
 800809e:	2200      	movs	r2, #0
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <USBD_LL_Init+0x94>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <USBD_LL_Init+0x94>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080ae:	480d      	ldr	r0, [pc, #52]	; (80080e4 <USBD_LL_Init+0x94>)
 80080b0:	f7fa f8e9 	bl	8002286 <HAL_PCD_Init>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080ba:	f7f9 fa57 	bl	800156c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	4808      	ldr	r0, [pc, #32]	; (80080e4 <USBD_LL_Init+0x94>)
 80080c2:	f7fb fa2e 	bl	8003522 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080c6:	2240      	movs	r2, #64	; 0x40
 80080c8:	2100      	movs	r1, #0
 80080ca:	4806      	ldr	r0, [pc, #24]	; (80080e4 <USBD_LL_Init+0x94>)
 80080cc:	f7fb f9e2 	bl	8003494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	2101      	movs	r1, #1
 80080d4:	4803      	ldr	r0, [pc, #12]	; (80080e4 <USBD_LL_Init+0x94>)
 80080d6:	f7fb f9dd 	bl	8003494 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000fd0 	.word	0x20000fd0

080080e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fa f9de 	bl	80024c0 <HAL_PCD_Start>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f918 	bl	8008340 <USBD_Get_USB_Status>
 8008110:	4603      	mov	r3, r0
 8008112:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008114:	7bbb      	ldrb	r3, [r7, #14]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	461a      	mov	r2, r3
 800812c:	4603      	mov	r3, r0
 800812e:	70fb      	strb	r3, [r7, #3]
 8008130:	460b      	mov	r3, r1
 8008132:	70bb      	strb	r3, [r7, #2]
 8008134:	4613      	mov	r3, r2
 8008136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008146:	78bb      	ldrb	r3, [r7, #2]
 8008148:	883a      	ldrh	r2, [r7, #0]
 800814a:	78f9      	ldrb	r1, [r7, #3]
 800814c:	f7fa fdc2 	bl	8002cd4 <HAL_PCD_EP_Open>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 f8f2 	bl	8008340 <USBD_Get_USB_Status>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008160:	7bbb      	ldrb	r3, [r7, #14]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f7fa fe0b 	bl	8002da4 <HAL_PCD_EP_Close>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f8d3 	bl	8008340 <USBD_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fa fecb 	bl	8002f62 <HAL_PCD_EP_SetStall>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f8b4 	bl	8008340 <USBD_Get_USB_Status>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f7fa ff10 	bl	800302a <HAL_PCD_EP_ClrStall>
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f895 	bl	8008340 <USBD_Get_USB_Status>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800821a:	7bbb      	ldrb	r3, [r7, #14]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008236:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823c:	2b00      	cmp	r3, #0
 800823e:	da0b      	bge.n	8008258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	333e      	adds	r3, #62	; 0x3e
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	e00b      	b.n	8008270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800826e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fa fcf5 	bl	8002c8a <HAL_PCD_SetAddress>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f84a 	bl	8008340 <USBD_Get_USB_Status>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	460b      	mov	r3, r1
 80082c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082d8:	7af9      	ldrb	r1, [r7, #11]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	f7fa fdf6 	bl	8002ece <HAL_PCD_EP_Transmit>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f829 	bl	8008340 <USBD_Get_USB_Status>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80082f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	460b      	mov	r3, r1
 800830a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800831a:	7af9      	ldrb	r1, [r7, #11]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	f7fa fd8a 	bl	8002e38 <HAL_PCD_EP_Receive>
 8008324:	4603      	mov	r3, r0
 8008326:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	4618      	mov	r0, r3
 800832c:	f000 f808 	bl	8008340 <USBD_Get_USB_Status>
 8008330:	4603      	mov	r3, r0
 8008332:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008334:	7dbb      	ldrb	r3, [r7, #22]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b03      	cmp	r3, #3
 8008352:	d817      	bhi.n	8008384 <USBD_Get_USB_Status+0x44>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <USBD_Get_USB_Status+0x1c>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	0800836d 	.word	0x0800836d
 8008360:	08008373 	.word	0x08008373
 8008364:	08008379 	.word	0x08008379
 8008368:	0800837f 	.word	0x0800837f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
    break;
 8008370:	e00b      	b.n	800838a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
    break;
 8008376:	e008      	b.n	800838a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
    break;
 800837c:	e005      	b.n	800838a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	73fb      	strb	r3, [r7, #15]
    break;
 8008382:	e002      	b.n	800838a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	73fb      	strb	r3, [r7, #15]
    break;
 8008388:	bf00      	nop
  }
  return usb_status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <__errno>:
 8008398:	4b01      	ldr	r3, [pc, #4]	; (80083a0 <__errno+0x8>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000654 	.word	0x20000654

080083a4 <__libc_init_array>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4e0d      	ldr	r6, [pc, #52]	; (80083dc <__libc_init_array+0x38>)
 80083a8:	4c0d      	ldr	r4, [pc, #52]	; (80083e0 <__libc_init_array+0x3c>)
 80083aa:	1ba4      	subs	r4, r4, r6
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	2500      	movs	r5, #0
 80083b0:	42a5      	cmp	r5, r4
 80083b2:	d109      	bne.n	80083c8 <__libc_init_array+0x24>
 80083b4:	4e0b      	ldr	r6, [pc, #44]	; (80083e4 <__libc_init_array+0x40>)
 80083b6:	4c0c      	ldr	r4, [pc, #48]	; (80083e8 <__libc_init_array+0x44>)
 80083b8:	f000 f8f6 	bl	80085a8 <_init>
 80083bc:	1ba4      	subs	r4, r4, r6
 80083be:	10a4      	asrs	r4, r4, #2
 80083c0:	2500      	movs	r5, #0
 80083c2:	42a5      	cmp	r5, r4
 80083c4:	d105      	bne.n	80083d2 <__libc_init_array+0x2e>
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083cc:	4798      	blx	r3
 80083ce:	3501      	adds	r5, #1
 80083d0:	e7ee      	b.n	80083b0 <__libc_init_array+0xc>
 80083d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083d6:	4798      	blx	r3
 80083d8:	3501      	adds	r5, #1
 80083da:	e7f2      	b.n	80083c2 <__libc_init_array+0x1e>
 80083dc:	08008630 	.word	0x08008630
 80083e0:	08008630 	.word	0x08008630
 80083e4:	08008630 	.word	0x08008630
 80083e8:	0800863c 	.word	0x0800863c

080083ec <malloc>:
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <malloc+0xc>)
 80083ee:	4601      	mov	r1, r0
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f000 b86d 	b.w	80084d0 <_malloc_r>
 80083f6:	bf00      	nop
 80083f8:	20000654 	.word	0x20000654

080083fc <free>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <free+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b817 	b.w	8008434 <_free_r>
 8008406:	bf00      	nop
 8008408:	20000654 	.word	0x20000654

0800840c <memcpy>:
 800840c:	b510      	push	{r4, lr}
 800840e:	1e43      	subs	r3, r0, #1
 8008410:	440a      	add	r2, r1
 8008412:	4291      	cmp	r1, r2
 8008414:	d100      	bne.n	8008418 <memcpy+0xc>
 8008416:	bd10      	pop	{r4, pc}
 8008418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008420:	e7f7      	b.n	8008412 <memcpy+0x6>

08008422 <memset>:
 8008422:	4402      	add	r2, r0
 8008424:	4603      	mov	r3, r0
 8008426:	4293      	cmp	r3, r2
 8008428:	d100      	bne.n	800842c <memset+0xa>
 800842a:	4770      	bx	lr
 800842c:	f803 1b01 	strb.w	r1, [r3], #1
 8008430:	e7f9      	b.n	8008426 <memset+0x4>
	...

08008434 <_free_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4605      	mov	r5, r0
 8008438:	2900      	cmp	r1, #0
 800843a:	d045      	beq.n	80084c8 <_free_r+0x94>
 800843c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008440:	1f0c      	subs	r4, r1, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfb8      	it	lt
 8008446:	18e4      	addlt	r4, r4, r3
 8008448:	f000 f8ac 	bl	80085a4 <__malloc_lock>
 800844c:	4a1f      	ldr	r2, [pc, #124]	; (80084cc <_free_r+0x98>)
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	4610      	mov	r0, r2
 8008452:	b933      	cbnz	r3, 8008462 <_free_r+0x2e>
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	6014      	str	r4, [r2, #0]
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800845e:	f000 b8a2 	b.w	80085a6 <__malloc_unlock>
 8008462:	42a3      	cmp	r3, r4
 8008464:	d90c      	bls.n	8008480 <_free_r+0x4c>
 8008466:	6821      	ldr	r1, [r4, #0]
 8008468:	1862      	adds	r2, r4, r1
 800846a:	4293      	cmp	r3, r2
 800846c:	bf04      	itt	eq
 800846e:	681a      	ldreq	r2, [r3, #0]
 8008470:	685b      	ldreq	r3, [r3, #4]
 8008472:	6063      	str	r3, [r4, #4]
 8008474:	bf04      	itt	eq
 8008476:	1852      	addeq	r2, r2, r1
 8008478:	6022      	streq	r2, [r4, #0]
 800847a:	6004      	str	r4, [r0, #0]
 800847c:	e7ec      	b.n	8008458 <_free_r+0x24>
 800847e:	4613      	mov	r3, r2
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	b10a      	cbz	r2, 8008488 <_free_r+0x54>
 8008484:	42a2      	cmp	r2, r4
 8008486:	d9fa      	bls.n	800847e <_free_r+0x4a>
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	1858      	adds	r0, r3, r1
 800848c:	42a0      	cmp	r0, r4
 800848e:	d10b      	bne.n	80084a8 <_free_r+0x74>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	4401      	add	r1, r0
 8008494:	1858      	adds	r0, r3, r1
 8008496:	4282      	cmp	r2, r0
 8008498:	6019      	str	r1, [r3, #0]
 800849a:	d1dd      	bne.n	8008458 <_free_r+0x24>
 800849c:	6810      	ldr	r0, [r2, #0]
 800849e:	6852      	ldr	r2, [r2, #4]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	4401      	add	r1, r0
 80084a4:	6019      	str	r1, [r3, #0]
 80084a6:	e7d7      	b.n	8008458 <_free_r+0x24>
 80084a8:	d902      	bls.n	80084b0 <_free_r+0x7c>
 80084aa:	230c      	movs	r3, #12
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	e7d3      	b.n	8008458 <_free_r+0x24>
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	1821      	adds	r1, r4, r0
 80084b4:	428a      	cmp	r2, r1
 80084b6:	bf04      	itt	eq
 80084b8:	6811      	ldreq	r1, [r2, #0]
 80084ba:	6852      	ldreq	r2, [r2, #4]
 80084bc:	6062      	str	r2, [r4, #4]
 80084be:	bf04      	itt	eq
 80084c0:	1809      	addeq	r1, r1, r0
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	605c      	str	r4, [r3, #4]
 80084c6:	e7c7      	b.n	8008458 <_free_r+0x24>
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
 80084ca:	bf00      	nop
 80084cc:	20000af4 	.word	0x20000af4

080084d0 <_malloc_r>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	1ccd      	adds	r5, r1, #3
 80084d4:	f025 0503 	bic.w	r5, r5, #3
 80084d8:	3508      	adds	r5, #8
 80084da:	2d0c      	cmp	r5, #12
 80084dc:	bf38      	it	cc
 80084de:	250c      	movcc	r5, #12
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	4606      	mov	r6, r0
 80084e4:	db01      	blt.n	80084ea <_malloc_r+0x1a>
 80084e6:	42a9      	cmp	r1, r5
 80084e8:	d903      	bls.n	80084f2 <_malloc_r+0x22>
 80084ea:	230c      	movs	r3, #12
 80084ec:	6033      	str	r3, [r6, #0]
 80084ee:	2000      	movs	r0, #0
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	f000 f857 	bl	80085a4 <__malloc_lock>
 80084f6:	4a21      	ldr	r2, [pc, #132]	; (800857c <_malloc_r+0xac>)
 80084f8:	6814      	ldr	r4, [r2, #0]
 80084fa:	4621      	mov	r1, r4
 80084fc:	b991      	cbnz	r1, 8008524 <_malloc_r+0x54>
 80084fe:	4c20      	ldr	r4, [pc, #128]	; (8008580 <_malloc_r+0xb0>)
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	b91b      	cbnz	r3, 800850c <_malloc_r+0x3c>
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f83d 	bl	8008584 <_sbrk_r>
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	4629      	mov	r1, r5
 800850e:	4630      	mov	r0, r6
 8008510:	f000 f838 	bl	8008584 <_sbrk_r>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d124      	bne.n	8008562 <_malloc_r+0x92>
 8008518:	230c      	movs	r3, #12
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f842 	bl	80085a6 <__malloc_unlock>
 8008522:	e7e4      	b.n	80084ee <_malloc_r+0x1e>
 8008524:	680b      	ldr	r3, [r1, #0]
 8008526:	1b5b      	subs	r3, r3, r5
 8008528:	d418      	bmi.n	800855c <_malloc_r+0x8c>
 800852a:	2b0b      	cmp	r3, #11
 800852c:	d90f      	bls.n	800854e <_malloc_r+0x7e>
 800852e:	600b      	str	r3, [r1, #0]
 8008530:	50cd      	str	r5, [r1, r3]
 8008532:	18cc      	adds	r4, r1, r3
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f836 	bl	80085a6 <__malloc_unlock>
 800853a:	f104 000b 	add.w	r0, r4, #11
 800853e:	1d23      	adds	r3, r4, #4
 8008540:	f020 0007 	bic.w	r0, r0, #7
 8008544:	1ac3      	subs	r3, r0, r3
 8008546:	d0d3      	beq.n	80084f0 <_malloc_r+0x20>
 8008548:	425a      	negs	r2, r3
 800854a:	50e2      	str	r2, [r4, r3]
 800854c:	e7d0      	b.n	80084f0 <_malloc_r+0x20>
 800854e:	428c      	cmp	r4, r1
 8008550:	684b      	ldr	r3, [r1, #4]
 8008552:	bf16      	itet	ne
 8008554:	6063      	strne	r3, [r4, #4]
 8008556:	6013      	streq	r3, [r2, #0]
 8008558:	460c      	movne	r4, r1
 800855a:	e7eb      	b.n	8008534 <_malloc_r+0x64>
 800855c:	460c      	mov	r4, r1
 800855e:	6849      	ldr	r1, [r1, #4]
 8008560:	e7cc      	b.n	80084fc <_malloc_r+0x2c>
 8008562:	1cc4      	adds	r4, r0, #3
 8008564:	f024 0403 	bic.w	r4, r4, #3
 8008568:	42a0      	cmp	r0, r4
 800856a:	d005      	beq.n	8008578 <_malloc_r+0xa8>
 800856c:	1a21      	subs	r1, r4, r0
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f808 	bl	8008584 <_sbrk_r>
 8008574:	3001      	adds	r0, #1
 8008576:	d0cf      	beq.n	8008518 <_malloc_r+0x48>
 8008578:	6025      	str	r5, [r4, #0]
 800857a:	e7db      	b.n	8008534 <_malloc_r+0x64>
 800857c:	20000af4 	.word	0x20000af4
 8008580:	20000af8 	.word	0x20000af8

08008584 <_sbrk_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4c06      	ldr	r4, [pc, #24]	; (80085a0 <_sbrk_r+0x1c>)
 8008588:	2300      	movs	r3, #0
 800858a:	4605      	mov	r5, r0
 800858c:	4608      	mov	r0, r1
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	f7f9 f942 	bl	8001818 <_sbrk>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_sbrk_r+0x1a>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	b103      	cbz	r3, 800859e <_sbrk_r+0x1a>
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	200013d8 	.word	0x200013d8

080085a4 <__malloc_lock>:
 80085a4:	4770      	bx	lr

080085a6 <__malloc_unlock>:
 80085a6:	4770      	bx	lr

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
